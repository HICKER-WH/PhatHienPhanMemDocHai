import streamlit as st
import torch
import torchvision
from torchvision import transforms
import torch.nn as nn
from PIL import Image
import numpy as np
import io
import os
import pandas as pd
from pathlib import Path
import time
import zipfile
import tempfile
import shutil
import base64
import hashlib
import datetime
import matplotlib.pyplot as plt
import streamlit.components.v1 as components

def pil_image_to_base64(pil_img):
    buf = io.BytesIO()
    pil_img.save(buf, format="PNG")
    byte_im = buf.getvalue()
    base64_str = base64.b64encode(byte_im).decode()
    return base64_str

# C√°c bi·∫øn c·∫•u h√¨nh
top_k_results = 10  # S·ªë l∆∞·ª£ng k·∫øt qu·∫£ top d·ª± ƒëo√°n mu·ªën hi·ªÉn th·ªã

# Helper function to load and encode the image
def get_image_as_base64(image_path):
    if not os.path.exists(image_path):
        st.error(f"Logo image not found at: {image_path}")
        return ""
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode()

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="Ph√¢n t√≠ch M√£ ƒë·ªôc",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- CSS t√πy ch·ªânh ---
st.markdown("""
<style>
    /* Background color for entire app */
    .stApp {
        background-color: #F6FBFF;
        margin-top: 2rem;
    }
    
    /* Main Styles */
    .main-header {
        font-size: 2rem;
        color: #1E88E5;
        font-weight: 700;
        margin-bottom: 1rem;
        text-align: center;
        padding: 0.5rem 0;
        background: radial-gradient(circle, #BBDEFB 0%, #E3F2FD 70%, #F5FBFF 100%);
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    /* Model upload styling */
    .model-upload-section {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        border: 2px dashed #dee2e6;
    }
    
    .model-info-card {
        background-color: #e8f5e8;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
        border-left: 5px solid #4caf50;
    }
    
    /* Add equal height columns */
    .equal-height-columns .stColumn {
        display: flex;
        flex-direction: column;
    }
    
    .equal-height-columns .stColumn > div {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }
    
    .equal-height-columns .stColumn > div > div {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }
    
    /* File info card styling */
    .file-info {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
     /* Result cards styling */
    .malware-card, .benign-card, .uncertain-card {
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        height: 100%;
    }
    
    .malware-card {
        background-color: #ffebee;
        border-left: 5px solid #f44336;
    }
    
    .benign-card {
        background-color: #e8f5e9;
        border-left: 5px solid #4caf50;
    }
    
    .uncertain-card {
        background-color: #fff8e1;
        border-left: 5px solid #ffc107;
    }
    
    /* Logo styling */
    .logo-container {
        margin-right: 5px;
        margin-left: -100px;
    }
    
    .logo-container img {
        height: 75px;
        width: auto;
        transition: transform 0.15s ease;
    }
    
    /* Title styling */
    .title-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    
    .title-line {
        display: block;
        text-align: center;
        line-height: 1.2;
    }
    
    .logo-container img:hover {
        transform: scale(1.05);
    }
    
    /* Add this to reduce the top margin of the main container */
    .block-container {
        padding-top: 1rem !important;
        margin-top: 0 !important;
    }
    
    /* Reduce spacing at the top of the app */
    .stApp {
        margin-top: 2rem;
    }
    
    /* Set sidebar width to exactly 324px when expanded */
    [data-testid="stSidebar"][aria-expanded="true"] {
        width: 324px !important;
        min-width: 324px !important;
        max-width: 324px !important;
    }
    
    /* Make sure sidebar can be collapsed */
    [data-testid="stSidebar"][aria-expanded="false"] {
        width: auto !important;
        margin-left: -20px;
    }
    
    /* Fix for sidebar collapse button */
    button[kind="headerNoPadding"] {
        display: block !important;
    }
    
    /* Sidebar styling based on the image */
    .st-emotion-cache-vmpjyt.e1dbuyne0 {
        position: relative;
        top: 1.8rem;
        background-color: rgb(240, 242, 246);
        z-index: 99999;
        min-width: 244px;
        max-width: 550px;
        transform: none;
        transition: transform 300ms, min-width 300ms, max-width 300ms;
    }
    
    /* Hide sidebar header with collapse button */
    [data-testid="stSidebarHeader"] {
        display: none !important;
    }
    
    /* Hide the arrow button at the bottom */
    button[kind="secondary"] {
        display: none !important;
    }
    
    /* Make info box text bold and centered */
    .stAlert {
        text-align: center !important;
        font-weight: bold !important;
    }
    
    /* Improve tab styling with more padding */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        padding: 10px 0px;
    }
    
    .stTabs [data-baseweb="tab"] {
        background-color: #E3F2FD;
        border-radius: 4px 4px 0 0;
        padding: 12px 20px;
        border: 1px solid #BBDEFB;
        margin-top: 5px;
        margin-bottom: 5px;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #1976D2 !important;
        color: white !important;
    }
    
    /* Gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c label v√† input */
    .css-ocqkz7, .css-1qrvfrg {
        margin-top: 0.5rem !important;
        margin-bottom: 0.5rem !important;
        padding-top: 0 !important;
        padding-bottom: 0 !important;
    }
    
    /* Redesigned sub-header for better appearance */
    .sub-header {
        font-size: 1.4rem;
        color: #0D47A1;
        font-weight: 600;
        margin-top: 1rem;
        margin-bottom: 1rem;
        padding: 0.4rem 4rem;
        background: linear-gradient(90deg, #E3F2FD, #BBDEFB);
        border-radius: 10000px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    /* Center tabs */
    .stTabs [data-baseweb="tab-list"] {
        justify-content: center;
    }
    
    /* Info text styling */
    .info-text {
        text-align: center;
        padding: 0px;
        margin: 10px 0;
        border-radius: 8px;
        background-color: #f8f9fa;
    }
    
    /* Map header styling */
    .map-header {
        font-size: 1.5rem;
        color: #1E88E5;
        font-weight: 600;
        margin: 1.5rem 0 1rem 0;
        text-align: center;
    }
    
    /* Map container styling */
    iframe {
        width: 100%;
        border: none;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
</style>
""", unsafe_allow_html=True)

# --- Ti√™u ƒë·ªÅ ---
st.markdown('''
<div class="main-header">
    <a href="https://dhkthc.bocongan.gov.vn/TrangChu/" target="_blank" class="logo-container">
        <img src="https://raw.githubusercontent.com/HICKER-WH/PhatHienPhanMemDocHai/main/Logot07.png" alt="Logo" style="height: 60px;">
    </a>
    <div class="title-container">
        <span class="title-line">üîç Ph√°t Hi·ªán Ph·∫ßn M·ªÅm ƒê·ªôc H·∫°i</span>
        <span class="title-line">Tr√™n N·ªÅn T·∫£ng Windows</span>
    </div>
</div>
''', unsafe_allow_html=True)
st.markdown('<div class="info-text">üí° S·ª≠ d·ª•ng m√¥ h√¨nh Inception v3 ƒë·ªÉ ph√¢n t√≠ch v√† ph√°t hi·ªán m√£ ƒë·ªôc trong c√°c file th·ª±c thi .exe ho·∫∑c .dll</div>', unsafe_allow_html=True)

# --- Sidebar ---
with st.sidebar:
    st.markdown('<div class="sub-header">‚öôÔ∏è <span>C·∫•u h√¨nh</span></div>', unsafe_allow_html=True)
    
    # # TH√äM PH·∫¶N UPLOAD MODEL
    # st.markdown("### ü§ñ T·∫£i m√¥ h√¨nh")
    
    # Ch·ªçn c√°ch t·∫£i model
    model_source = st.radio(
        "ü§ñ Ch·ªçn ngu·ªìn m√¥ h√¨nh:",
        ["ƒê∆∞·ªùng d·∫´n c·ª•c b·ªô", "Upload t·ª´ m√°y t√≠nh"],
        help="Ch·ªçn c√°ch ƒë·ªÉ t·∫£i m√¥ h√¨nh AI"
    )
    
    MODEL_PATH = None
    uploaded_model = None
    
    if model_source == "ƒê∆∞·ªùng d·∫´n c·ª•c b·ªô":
        # ƒê∆∞·ªùng d·∫´n ƒë·∫øn model (c≈©)
        MODEL_PATH = st.text_input("ƒê∆∞·ªùng d·∫´n m√¥ h√¨nh", value='Best_Inception_Version3.pth')
        
    elif model_source == "Upload t·ª´ m√°y t√≠nh":
        # Upload model t·ª´ m√°y t√≠nh (m·ªõi)
        # st.markdown('<div class="model-upload-section">', unsafe_allow_html=True)
        uploaded_model = st.file_uploader(
            "Ch·ªçn file m√¥ h√¨nh (.pth, .pt)",
            type=['pth', 'pt'],
            help="Upload file m√¥ h√¨nh PyTorch ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán"
        )
        if uploaded_model is not None:
            # Hi·ªÉn th·ªã th√¥ng tin file model
            model_size_mb = uploaded_model.size / (1024 * 1024)
            st.markdown(f"""
            <div class="model-info-card">
                <strong>üìÑ T√™n file:</strong> {uploaded_model.name}<br>
                <strong>üìä K√≠ch th∆∞·ªõc:</strong> {model_size_mb:.2f} MB<br>
                <strong>üîß Lo·∫°i:</strong> {uploaded_model.type}<br>
                <strong>‚úÖ Tr·∫°ng th√°i:</strong> ƒê√£ t·∫£i l√™n th√†nh c√¥ng
            </div>
            """, unsafe_allow_html=True)
    
    # K√≠ch th∆∞·ªõc ·∫£nh
    col1, col2 = st.columns(2)
    with col1:
        img_size_1 = st.number_input("Size ·∫£nh model", value=299, min_value=64, max_value=512)
    with col2:
        img_size_2 = st.number_input("Size ·∫£nh hi·ªÉn th·ªã", value=224, min_value=64, max_value=512)    
    IMAGE_SIZE = (int(img_size_1), int(img_size_1))
    IMAGE_SIZE2 = (int(img_size_2), int(img_size_2))
    
    # Ng∆∞·ª°ng x√°c su·∫•t
    threshold = st.slider("Ng∆∞·ª°ng x√°c su·∫•t ph√°t hi·ªán m√£ ƒë·ªôc", min_value=0.0, max_value=1.0, value=0.7, step=0.05)
    
    # Th√™m tham s·ªë m·ªõi
    max_file_size = st.number_input("K√≠ch th∆∞·ªõc file t·ªëi ƒëa (MB)", value=200, max_value=500) 
    
    # Danh s√°ch l·ªõp l√†nh t√≠nh
    benign_input = st.text_area("Nh·∫≠p t√™n c√°c l·ªõp l√†nh t√≠nh (m·ªói t√™n m·ªôt d√≤ng)", "benign\nclean\nnormal\nlegitimate")
    benign_classes = [cls.strip() for cls in benign_input.split('\n') if cls.strip()]
    
    # Ki·ªÉm tra thi·∫øt b·ªã
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    st.info(f"ƒêang s·ª≠ d·ª•ng: {device}")

# --- H√†m tr·ª£ gi√∫p ---
def binary_to_image(file_bytes, size=(224, 224)):
    """Chuy·ªÉn ƒë·ªïi bytes c·ªßa file th√†nh ·∫£nh PIL Grayscale, sau ƒë√≥ sang RGB."""
    try:
        byte_array = np.frombuffer(file_bytes, dtype=np.uint8)
        required_pixels = size[0] * size[1]

        # Padding ho·∫∑c Truncating ƒë·ªÉ c√≥ ƒë√∫ng s·ªë l∆∞·ª£ng pixel
        if byte_array.size < required_pixels:
            # Pad b·∫±ng 0 n·∫øu file nh·ªè h∆°n k√≠ch th∆∞·ªõc ·∫£nh
            padded_array = np.pad(byte_array, (0, required_pixels - byte_array.size), 'constant')
        else:
            # Truncate n·∫øu file l·ªõn h∆°n k√≠ch th∆∞·ªõc ·∫£nh
            padded_array = byte_array[:required_pixels]

        # Reshape th√†nh ·∫£nh grayscale
        image_array = padded_array.reshape(size)

        # Chuy·ªÉn ƒë·ªïi sang ·∫£nh PIL Grayscale
        img = Image.fromarray(image_array, 'L')

        # Chuy·ªÉn ƒë·ªïi Grayscale sang RGB (v√¨ InceptionV3 c·∫ßn 3 k√™nh)
        img_rgb = img.convert('RGB')
        return img_rgb
    except Exception as e:
        st.error(f"L·ªói khi chuy·ªÉn ƒë·ªïi file sang ·∫£nh: {e}")
        return None

# TH√äM H√ÄM LOAD MODEL T·ª™ UPLOADED FILE
@st.cache_resource
def load_pytorch_model_from_upload(uploaded_file, device):
    """T·∫£i m√¥ h√¨nh Inception v3 t·ª´ uploaded file."""
    try:
        # ƒê·ªçc file t·ª´ uploaded_file
        file_bytes = uploaded_file.getvalue()
        
        # T·∫£i checkpoint t·ª´ bytes
        checkpoint = torch.load(io.BytesIO(file_bytes), map_location=device)
        
        # L·∫•y th√¥ng tin v·ªÅ l·ªõp t·ª´ checkpoint
        if 'classes' in checkpoint:
            class_names = checkpoint['classes']
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªõp trong file model, s·ª≠ d·ª•ng t√™n l·ªõp m·∫∑c ƒë·ªãnh")
            class_names = [f'Lo·∫°i_{i+1}' for i in range(60)]  # M·∫∑c ƒë·ªãnh 60 l·ªõp
            
        num_classes = len(class_names)
        
        # Kh·ªüi t·∫°o ki·∫øn tr√∫c m√¥ h√¨nh
        model = torchvision.models.inception_v3(weights=None, aux_logits=True)

        # ƒêi·ªÅu ch·ªânh l·ªõp cu·ªëi cho ph√π h·ª£p v·ªõi s·ªë l·ªõp
        num_ftrs_fc = model.fc.in_features
        model.fc = nn.Linear(num_ftrs_fc, num_classes)
        if model.aux_logits:
             num_ftrs_aux = model.AuxLogits.fc.in_features
             model.AuxLogits.fc = nn.Linear(num_ftrs_aux, num_classes)

        # T·∫£i tr·ªçng s·ªë ƒë√£ hu·∫•n luy·ªán
        if 'model_state_dict' in checkpoint:
            model_state_dict = checkpoint['model_state_dict']
        else:
            model_state_dict = checkpoint # Gi·∫£ s·ª≠ file ch·ªâ ch·ª©a state_dict

        model.load_state_dict(model_state_dict)
        model.to(device)
        model.eval() # Chuy·ªÉn sang ch·∫ø ƒë·ªô ƒë√°nh gi√°
        
        st.success(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng m√¥ h√¨nh t·ª´ file: {uploaded_file.name}")
        return model, class_names
        
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh t·ª´ file upload: {e}")
        return None, None

# Cache vi·ªác t·∫£i model ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô (c≈© - t·ª´ ƒë∆∞·ªùng d·∫´n)
@st.cache_resource
def load_pytorch_model(model_path, device):
    """T·∫£i m√¥ h√¨nh Inception v3 ƒë√£ hu·∫•n luy·ªán t·ª´ ƒë∆∞·ªùng d·∫´n."""
    try:
        if not os.path.exists(model_path):
            st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh t·∫°i '{model_path}'")
            return None, None

        # T·∫£i checkpoint ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ l·ªõp
        checkpoint = torch.load(model_path, map_location=device)
        
        # L·∫•y th√¥ng tin v·ªÅ l·ªõp t·ª´ checkpoint
        if 'classes' in checkpoint:
            class_names = checkpoint['classes']
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªõp trong file model, s·ª≠ d·ª•ng t√™n l·ªõp m·∫∑c ƒë·ªãnh")
            class_names = [f'Lo·∫°i_{i+1}' for i in range(60)]  # M·∫∑c ƒë·ªãnh 60 l·ªõp
            
        num_classes = len(class_names)
        
        # Kh·ªüi t·∫°o ki·∫øn tr√∫c m√¥ h√¨nh
        model = torchvision.models.inception_v3(weights=None, aux_logits=True)

        # ƒêi·ªÅu ch·ªânh l·ªõp cu·ªëi cho ph√π h·ª£p v·ªõi s·ªë l·ªõp
        num_ftrs_fc = model.fc.in_features
        model.fc = nn.Linear(num_ftrs_fc, num_classes)
        if model.aux_logits:
             num_ftrs_aux = model.AuxLogits.fc.in_features
             model.AuxLogits.fc = nn.Linear(num_ftrs_aux, num_classes)

        # T·∫£i tr·ªçng s·ªë ƒë√£ hu·∫•n luy·ªán
        if 'model_state_dict' in checkpoint:
            model_state_dict = checkpoint['model_state_dict']
        else:
            model_state_dict = checkpoint # Gi·∫£ s·ª≠ file ch·ªâ ch·ª©a state_dict

        model.load_state_dict(model_state_dict)
        model.to(device)
        model.eval() # Chuy·ªÉn sang ch·∫ø ƒë·ªô ƒë√°nh gi√°
        return model, class_names
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
        return None, None

def predict(model, image, device, class_names, top_k=10):
    """Th·ª±c hi·ªán d·ª± ƒëo√°n tr√™n ·∫£nh ƒë·∫ßu v√†o."""
    if model is None or image is None:
        return None

    try:
        # ƒê·ªãnh nghƒ©a c√°c ph√©p bi·∫øn ƒë·ªïi ·∫£nh
        preprocess = transforms.Compose([
            transforms.Resize(IMAGE_SIZE),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ])

        input_tensor = preprocess(image)
        input_batch = input_tensor.unsqueeze(0) # T·∫°o batch dimension
        input_batch = input_batch.to(device)

        with torch.no_grad():
            output = model(input_batch)
            # X·ª≠ l√Ω output t·ª´ Inception v3 (c√≥ th·ªÉ l√† tuple n·∫øu aux_logits=True trong eval)
            if isinstance(output, tuple):
                output = output[0] # Ch·ªâ l·∫•y output ch√≠nh

            probabilities = torch.softmax(output, dim=1)

        # L·∫•y top K d·ª± ƒëo√°n
        top_p, top_class_indices = torch.topk(probabilities, top_k, dim=1)

        # Chuy·ªÉn k·∫øt qu·∫£ sang CPU v√† numpy
        top_p = top_p.squeeze().cpu().numpy()
        top_class_indices = top_class_indices.squeeze().cpu().numpy()

        # T·∫°o danh s√°ch k·∫øt qu·∫£ (class_name, probability)
        results = []
        for i in range(top_k):
            class_idx = top_class_indices[i]
            if class_idx < len(class_names):
                class_name = class_names[class_idx]
                probability = float(top_p[i])
                results.append({"L·ªõp": class_name, "X√°c su·∫•t": probability})
            else:
                 results.append({"L·ªõp": f"Index_{class_idx}_Ngo√†i_Ph·∫°m_Vi", "X√°c su·∫•t": float(top_p[i])})

        return results

    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
        return None

def is_malware(predictions, benign_classes=None, threshold=0.7):
    """
    X√°c ƒë·ªãnh xem file c√≥ ph·∫£i l√† m√£ ƒë·ªôc hay kh√¥ng d·ª±a tr√™n d·ª± ƒëo√°n.
    
    Args:
        predictions: Danh s√°ch c√°c d·ª± ƒëo√°n
        benign_classes: Danh s√°ch c√°c l·ªõp ƒë∆∞·ª£c coi l√† l√†nh t√≠nh (kh√¥ng ph·∫£i m√£ ƒë·ªôc)
        threshold: Ng∆∞·ª°ng x√°c su·∫•t ƒë·ªÉ x√°c ƒë·ªãnh k·∫øt qu·∫£
    
    Returns:
        (bool, str, float, int): (C√≥ ph·∫£i m√£ ƒë·ªôc kh√¥ng, L√Ω do, X√°c su·∫•t, Lo·∫°i k·∫øt qu·∫£)
        Lo·∫°i k·∫øt qu·∫£: 0 = l√†nh t√≠nh, 1 = m√£ ƒë·ªôc, 2 = kh√¥ng ch·∫Øc ch·∫Øn
    """
    if not predictions or len(predictions) == 0:
        return False, "Kh√¥ng c√≥ k·∫øt qu·∫£ d·ª± ƒëo√°n", 0.0, 2
    
    # N·∫øu kh√¥ng c√≥ danh s√°ch l·ªõp l√†nh t√≠nh, ch·ªâ coi "benign" l√† l√†nh t√≠nh
    if benign_classes is None:
        benign_classes = ["benign"]
    
    # L·∫•y l·ªõp c√≥ x√°c su·∫•t cao nh·∫•t
    top_prediction = predictions[0]
    top_class = top_prediction["L·ªõp"]
    top_prob = top_prediction["X√°c su·∫•t"]
    
    # Ki·ªÉm tra xem l·ªõp c√≥ x√°c su·∫•t cao nh·∫•t c√≥ ph·∫£i l√† l√†nh t√≠nh kh√¥ng
    is_benign_class = any(benign_name.lower() in top_class.lower() for benign_name in benign_classes)
    
    # Ph√¢n lo·∫°i d·ª±a tr√™n l·ªõp v√† ng∆∞·ª°ng x√°c su·∫•t
    if is_benign_class:
        if top_prob >= threshold:
            return False, f"L√†nh t√≠nh ({top_class})", top_prob, 0
        else:
            return False, f"C√≥ th·ªÉ l√†nh t√≠nh ({top_class}), nh∆∞ng x√°c su·∫•t th·∫•p", top_prob, 2
    else:
        # N·∫øu kh√¥ng ph·∫£i l·ªõp l√†nh t√≠nh, th√¨ l√† m√£ ƒë·ªôc
        if top_prob >= threshold:
            return True, f"M√£ ƒë·ªôc ({top_class})", top_prob, 1
        else:
            # Khi x√°c su·∫•t th·∫•p, v·∫´n coi l√† m√£ ƒë·ªôc nh∆∞ng v·ªõi m·ª©c ƒë·ªô tin c·∫≠y th·∫•p
            return True, f"C√≥ th·ªÉ l√† m√£ ƒë·ªôc ({top_class}), x√°c su·∫•t th·∫•p", top_prob, 2

def extract_zip_to_temp(zip_file):
    """Gi·∫£i n√©n file zip v√†o th∆∞ m·ª•c t·∫°m v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n"""
    temp_dir = tempfile.mkdtemp()
    with zipfile.ZipFile(zip_file, 'r') as zip_ref:
        zip_ref.extractall(temp_dir)
    return temp_dir

def scan_directory(directory_path, model, class_names, device, benign_classes, threshold, min_size_kb=0, max_size_mb=100, analysis_depth="C√¢n b·∫±ng"):
    """Qu√©t th∆∞ m·ª•c ƒë·ªÉ t√¨m v√† ph√¢n t√≠ch c√°c file .exe v√† .dll"""
    results = []
    file_paths = []
    
    # Chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc th√†nh bytes
    min_size_bytes = min_size_kb * 1024
    max_size_bytes = max_size_mb * 1024 * 1024
    
    # T√¨m t·∫•t c·∫£ c√°c file .exe v√† .dll trong th∆∞ m·ª•c
    for root, _, files in os.walk(directory_path):
        for file in files:
            if file.lower().endswith(('.exe', '.dll')):
                file_path = os.path.join(root, file)
                # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
                file_size = os.path.getsize(file_path)
                if min_size_bytes <= file_size <= max_size_bytes:
                    file_paths.append(file_path)
    
    if not file_paths:
        return [], 0, 0, 0
    
    # Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # Th√™m container cho th√¥ng tin th·ªùi gian
    time_info = st.empty()

    # ƒêi·ªÅu ch·ªânh ƒë·ªô s√¢u ph√¢n t√≠ch
    if analysis_depth == "Nhanh":
        sample_rate = 0.5  # Ch·ªâ ph√¢n t√≠ch 50% file n·∫øu c√≥ qu√° nhi·ªÅu
        if len(file_paths) > 100:
            file_paths = file_paths[:int(len(file_paths) * sample_rate)]
    elif analysis_depth == "S√¢u":
        # Ph√¢n t√≠ch t·∫•t c·∫£ file v·ªõi c√†i ƒë·∫∑t chi ti·∫øt h∆°n
        pass
    
    # Ph√¢n t√≠ch t·ª´ng file
    malware_count = 0
    uncertain_count = 0
    total_files = len(file_paths)
    
    # Th√™m bi·∫øn theo d√µi th·ªùi gian
    start_time = time.time()
    file_times = []  # L∆∞u th·ªùi gian x·ª≠ l√Ω m·ªói file

    for i, file_path in enumerate(file_paths):
        status_text.text(f"ƒêang ph√¢n t√≠ch: {os.path.basename(file_path)} ({i+1}/{total_files})")
        file_start_time = time.time()
        status_text.text(f"ƒêang ph√¢n t√≠ch: {os.path.basename(file_path)} ({i+1}/{total_files})")
        try:
            # ƒê·ªçc file
            with open(file_path, 'rb') as f:
                file_bytes = f.read()
            
            # Chuy·ªÉn ƒë·ªïi th√†nh ·∫£nh
            image = binary_to_image(file_bytes, size=IMAGE_SIZE2)
            
            if image:
                # D·ª± ƒëo√°n
                predictions = predict(model, image, device, class_names, top_k=top_k_results)
                
                if predictions:
                    # Ki·ªÉm tra c√≥ ph·∫£i m√£ ƒë·ªôc kh√¥ng
                    is_mal, reason, prob, result_type = is_malware(predictions, benign_classes, threshold)
                    
                    # Th√™m th√¥ng tin
                    # Th√™m th√¥ng tin chi ti·∫øt h∆°n v·ªÅ file
                    file_info = {
                        "T√™n file": os.path.basename(file_path),
                        "ƒê∆∞·ªùng d·∫´n": file_path,
                        "K√≠ch th∆∞·ªõc": len(file_bytes),
                        "K√≠ch th∆∞·ªõc (KB)": round(len(file_bytes) / 1024, 2),
                        "Lo·∫°i": reason,
                        "X√°c su·∫•t": prob,
                        "L√† m√£ ƒë·ªôc": is_mal,
                        "K·∫øt qu·∫£": result_type,
                        "Top d·ª± ƒëo√°n": predictions[:top_k_results],
                        "Th·ªùi gian ph√¢n t√≠ch": time.strftime("%Y-%m-%d %H:%M:%S"),
                        "Entropy": calculate_entropy(file_bytes) if analysis_depth == "S√¢u" else None
                    }
                    
                    # L∆∞u k·∫øt qu·∫£
                    results.append(file_info)
                    
                    if is_mal:
                        malware_count += 1
                    if result_type == 2:  # Kh√¥ng ch·∫Øc ch·∫Øn
                        uncertain_count += 1
        
        except Exception as e:
            st.error(f"L·ªói khi ph√¢n t√≠ch file {file_path}: {e}")
        
         # L∆∞u th·ªùi gian x·ª≠ l√Ω file
        file_times.append(time.time() - file_start_time)

        # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
        progress_percent = (i + 1) / total_files
        progress_bar.progress(progress_percent)

        # T√≠nh to√°n v√† hi·ªÉn th·ªã th√¥ng tin th·ªùi gian
        if i > 0:  # C·∫ßn √≠t nh·∫•t 1 file ƒë·ªÉ ∆∞·ªõc t√≠nh
            elapsed_time = time.time() - start_time
            avg_time_per_file = sum(file_times) / len(file_times)
            remaining_files = total_files - (i + 1)
            estimated_remaining_time = avg_time_per_file * remaining_files
            
            # Chuy·ªÉn ƒë·ªïi th·ªùi gian c√≤n l·∫°i th√†nh ng√†y/gi·ªù/ph√∫t
            days, remainder = divmod(estimated_remaining_time, 86400)
            hours, remainder = divmod(remainder, 3600)
            minutes, seconds = divmod(remainder, 60)
            
            # Chuy·ªÉn ƒë·ªïi th·ªùi gian ƒë√£ tr√¥i qua
            elapsed_days, remainder = divmod(elapsed_time, 86400)
            elapsed_hours, remainder = divmod(remainder, 3600)
            elapsed_minutes, remainder = divmod(remainder, 60)
            elapsed_seconds = int(remainder)
            
            # Hi·ªÉn th·ªã th√¥ng tin th·ªùi gian
            time_info.markdown(f"""
            <div style="background-color: #f0f2f6; padding: 10px; border-radius: 5px; margin-bottom: 10px;">
                <b>Ti·∫øn ƒë·ªô qu√©t:</b> {progress_percent:.1%} ({i+1}/{total_files} files) <br>
                <b>Th·ªùi gian ƒë√£ qu√©t:</b> {int(elapsed_days)} ng√†y {int(elapsed_hours)} gi·ªù {int(elapsed_minutes)} ph√∫t {elapsed_seconds} gi√¢y <br>
                <b>Th·ªùi gian c√≤n l·∫°i (∆∞·ªõc t√≠nh):</b> {int(days)} ng√†y {int(hours)} gi·ªù {int(minutes)} ph√∫t {int(seconds)} gi√¢y <br>
                <b>T·ªëc ƒë·ªô trung b√¨nh:</b> {1/avg_time_per_file:.2f} files/gi√¢y
            </div>
            """, unsafe_allow_html=True)
        
    # Hi·ªÉn th·ªã th√¥ng tin t·ªïng th·ªùi gian qu√©t
    total_time = time.time() - start_time
    days, remainder = divmod(total_time, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    status_text.markdown(f"""
    <div style="background-color: #e6f3ff; padding: 10px; border-radius: 5px; margin: 10px 0;">
        <b>‚úÖ Qu√©t ho√†n t·∫•t!</b><br>
        <b>T·ªïng th·ªùi gian qu√©t:</b> {int(days)} ng√†y {int(hours)} gi·ªù {int(minutes)} ph√∫t {int(seconds)} gi√¢y<br>
        <b>S·ªë file ƒë√£ qu√©t:</b> {len(results)}/{total_files}<br>
        <b>S·ªë file m√£ ƒë·ªôc ph√°t hi·ªán ƒë∆∞·ª£c:</b> {malware_count}
    </div>
    """, unsafe_allow_html=True)
    
    status_text.empty()
    return results, malware_count, uncertain_count, total_files

def calculate_entropy(data):
    """T√≠nh entropy c·ªßa d·ªØ li·ªáu binary"""
    if not data:
        return 0
    
    entropy = 0
    for x in range(256):
        p_x = data.count(x) / len(data)
        if p_x > 0:
            entropy += -p_x * np.log2(p_x)
    return entropy

# --- PH·∫¶N T·∫¢I M√î H√åNH (C·∫¨P NH·∫¨T) ---
model = None
class_names = None

# T·∫£i m√¥ h√¨nh d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
if model_source == "ƒê∆∞·ªùng d·∫´n c·ª•c b·ªô" and MODEL_PATH:
    model, class_names = load_pytorch_model(MODEL_PATH, device)
elif model_source == "Upload t·ª´ m√°y t√≠nh" and uploaded_model is not None:
    model, class_names = load_pytorch_model_from_upload(uploaded_model, device)

# --- Tab ch√≠nh ---
<<<<<<< HEAD
tab1, tab2, tab3, tab4 = st.tabs(["üìÑ Qu√©t ch∆∞∆°ng tr√¨nh ƒë∆°n l·∫ª", "üìÅ Qu√©t nhanh ch∆∞∆°ng tr√¨nh trong th∆∞ m·ª•c", "üíª SOC VI·ªÜT NAM", "‚ÑπÔ∏è Th√¥ng tin chung"])
=======
tab1, tab2, tab3, tab4 = st.tabs(["üìÑ Qu√©t ch∆∞∆°ng tr√¨nh ƒë∆°n l·∫ª", "üìÅ Qu√©t nhanh ch∆∞∆°ng tr√¨nh trong th∆∞ m·ª•c", "üíª SOC Vi·ªát Nam", "‚ÑπÔ∏è Th√¥ng tin chung"])

# --- Tab ph√¢n t√≠ch file ƒë∆°n l·∫ª ---
with tab1:
    st.markdown('<div class="sub-header">üìÑ T·∫£i l√™n file ƒë·ªÉ ph√¢n t√≠ch</div>', unsafe_allow_html=True)
    
    # Ki·ªÉm tra xem m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i ch∆∞a
    if model is None:
        st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i m√¥ h√¨nh tr∆∞·ªõc khi ph√¢n t√≠ch file!")
        st.info("üí° H√£y ch·ªçn ngu·ªìn m√¥ h√¨nh trong sidebar v√† t·∫£i m√¥ h√¨nh l√™n.")
    else:
        st.markdown("""
        <style>
        /* Hi·ªáu ·ª©ng icon khi hover */
        div[data-testid="stFileUploader"] svg {
            transition: transform 0.3s cubic-bezier(.22,1,.36,1.01);
        }
        div[data-testid="stFileUploader"]:hover svg {
            transform: scale(1) rotate(-720deg);
            filter: drop-shadow(0 2px 10px #1976d233);
            color: #ec0567  ;
        }
        
        </style>
        """, unsafe_allow_html=True)
        uploaded_file = st.file_uploader("Ch·ªçn file (.exe ho·∫∑c .dll)", type=['exe', 'dll'])

        if uploaded_file is not None:
            st.markdown('<div class="sub-header">üìä K·∫øt qu·∫£ ph√¢n t√≠ch</div>', unsafe_allow_html=True)
            col1, col2 = st.columns(2)

            with col1:
                st.markdown(f"**T√™n file:** `{uploaded_file.name}`")
                st.markdown(f"**Lo·∫°i file:** `{uploaded_file.type}`")
                st.markdown(f"**K√≠ch th∆∞·ªõc:** `{uploaded_file.size:,}` bytes (`{uploaded_file.size/1024:.2f}` KB)")
                st.markdown(f"**Th·ªùi gian ph√¢n t√≠ch:** `{time.strftime('%Y-%m-%d %H:%M:%S')}`")

                # ƒê·ªçc n·ªôi dung file
                file_bytes = uploaded_file.getvalue()

                with st.spinner("ƒêang chuy·ªÉn ƒë·ªïi file sang ·∫£nh..."):
                    pil_image = binary_to_image(file_bytes, size=IMAGE_SIZE2)

                if pil_image:
                    st.image(pil_image, caption="Bi·ªÉu di·ªÖn h√¨nh ·∫£nh c·ªßa file", width=200)
                else:
                    st.error("Kh√¥ng th·ªÉ t·∫°o ·∫£nh t·ª´ file.")

            with col2:
                if pil_image:
                    with st.spinner("ƒêang ph√¢n t√≠ch b·∫±ng m√¥ h√¨nh..."):
                        predictions = predict(model, pil_image, device, class_names, top_k=top_k_results)

                    if predictions:
                        # T·∫°o tabs cho t·∫•t c·∫£ c√°c th√¥ng tin
                        result_tabs = st.tabs(["K·∫øt lu·∫≠n", "Top d·ª± ƒëo√°n", "Chi ti·∫øt"])
                        
                        with result_tabs[0]:
                            # Th√™m k·∫øt lu·∫≠n v·ªÅ m√£ ƒë·ªôc
                            is_malware_result, reason, prob, result_type = is_malware(predictions, benign_classes, threshold)
                            
                            # Hi·ªÉn th·ªã k·∫øt lu·∫≠n v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng
                            if is_malware_result and result_type == 1:  # M√£ ƒë·ªôc v·ªõi x√°c su·∫•t cao
                                st.markdown('<div class="malware-card">', unsafe_allow_html=True)
                                st.markdown(f"### ‚ö†Ô∏è K·∫æT LU·∫¨N: File l√† m√£ ƒë·ªôc")
                                st.markdown(f"**Lo·∫°i:** {reason}")
                                st.markdown(f"**X√°c su·∫•t:** {prob:.2%}")
                                st.markdown(f"**M·ª©c ƒë·ªô tin c·∫≠y:** Cao")
                                st.markdown('</div>', unsafe_allow_html=True)
                            elif not is_malware_result and result_type == 0:  # L√†nh t√≠nh v·ªõi x√°c su·∫•t cao
                                st.markdown('<div class="benign-card">', unsafe_allow_html=True)
                                st.markdown(f"### ‚úÖ K·∫æT LU·∫¨N: File kh√¥ng ph·∫£i m√£ ƒë·ªôc")
                                st.markdown(f"**Lo·∫°i:** {reason}")
                                st.markdown(f"**X√°c su·∫•t:** {prob:.2%}")
                                st.markdown(f"**M·ª©c ƒë·ªô tin c·∫≠y:** Cao")
                                st.markdown('</div>', unsafe_allow_html=True)
                            else:  # Kh√¥ng ch·∫Øc ch·∫Øn
                                st.markdown('<div class="uncertain-card">', unsafe_allow_html=True)
                                st.markdown(f"### ‚ö†Ô∏è K·∫æT LU·∫¨N: {reason}")
                                st.markdown(f"**X√°c su·∫•t:** {prob:.2%}")
                                st.markdown(f"**L∆∞u √Ω:** X√°c su·∫•t d∆∞·ªõi ng∆∞·ª°ng {threshold:.2%}, k·∫øt qu·∫£ c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c")
                                st.markdown('</div>', unsafe_allow_html=True)
                        
                        with result_tabs[1]:
                            # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
                            df_predictions = pd.DataFrame([{"L·ªõp": p["L·ªõp"], "X√°c su·∫•t": f"{p['X√°c su·∫•t']:.4f}"} for p in predictions])
                            st.dataframe(df_predictions, use_container_width=True, height=300)
                            
                        with result_tabs[2]:
                            # Th√™m ph√¢n t√≠ch chi ti·∫øt
                            with st.expander("Xem ph√¢n t√≠ch chi ti·∫øt"):
                                # T·∫°o tabs cho ph√¢n t√≠ch chi ti·∫øt
                                detail_tabs = st.tabs(["T·ªïng quan", "Ph√¢n t√≠ch tƒ©nh", "Ph√¢n b·ªë byte", "Chu·ªói ƒë√°ng ch√∫ √Ω"])
                            
                                with detail_tabs[0]:
                                    # Tab t·ªïng quan
                                    col1, col2 = st.columns(2)
                                    with col1:
                                        st.markdown("#### Th√¥ng tin c∆° b·∫£n")
                                        st.markdown(f"**MD5:** `{hashlib.md5(file_bytes).hexdigest()}`")
                                        st.markdown(f"**SHA-1:** `{hashlib.sha1(file_bytes).hexdigest()}`")
                                        st.markdown(f"**SHA-256:** `{hashlib.sha256(file_bytes).hexdigest()}`")
                                        st.markdown(f"**K√≠ch th∆∞·ªõc:** `{len(file_bytes):,}` bytes")
                                        # T√≠nh entropy
                                        entropy = calculate_entropy(file_bytes)
                                        st.markdown(f"**Entropy:** `{entropy:.4f}/8.0`")
                                        # ƒê√°nh gi√° entropy
                                        if entropy < 6.0:
                                            entropy_eval = "Th·∫•p (file th√¥ng th∆∞·ªùng)"
                                        elif entropy < 7.0:
                                            entropy_eval = "Trung b√¨nh (c√≥ th·ªÉ n√©n/m√£ h√≥a m·ªôt ph·∫ßn)"
                                        else:
                                            entropy_eval = "Cao (c√≥ th·ªÉ ƒë∆∞·ª£c n√©n/m√£ h√≥a/ƒë√≥ng g√≥i)"
                                        st.markdown(f"**ƒê√°nh gi√° entropy:** {entropy_eval}")
                                    with col2:
                                        st.markdown("#### ƒê√°nh gi√° m·ªëi ƒëe d·ªça")
                                        # T·∫°o thang ƒëi·ªÉm ƒëe d·ªça d·ª±a tr√™n x√°c su·∫•t v√† entropy
                                        threat_score = int((prob * 0.7 + min(entropy/8.0, 1.0) * 0.3) * 10)
                                        # Hi·ªÉn th·ªã thang ƒëi·ªÉm ƒëe d·ªça
                                        threat_color = "red" if threat_score >= 7 else "orange" if threat_score >= 4 else "green"
                                        st.markdown(f"""
                                        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
                                            <h5>ƒêi·ªÉm ƒëe d·ªça: <span style="color: {threat_color};">{threat_score}/10</span></h5>
                                            <div style="background-color: #e9ecef; height: 20px; border-radius: 10px; overflow: hidden;">
                                                <div style="width: {threat_score*10}%; background-color: {threat_color}; height: 100%;"></div>
                                            </div>
                                            <p style="margin-top: 10px; font-size: 0.9em;">D·ª±a tr√™n x√°c su·∫•t ph√°t hi·ªán v√† c√°c ƒë·∫∑c ƒëi·ªÉm tƒ©nh</p>
                                        </div>
                                        """, unsafe_allow_html=True)
                                        
                                        # Hi·ªÉn th·ªã c√°c c·∫£nh b√°o
                                        if is_malware_result:
                                            if entropy > 7.0:
                                                st.warning("‚ö†Ô∏è Entropy cao k·∫øt h·ª£p v·ªõi d·ª± ƒëo√°n m√£ ƒë·ªôc l√† d·∫•u hi·ªáu ƒë√°ng ng·ªù!")
                                            if prob > 0.9:
                                                st.error("üî¥ X√°c su·∫•t ph√°t hi·ªán m√£ ƒë·ªôc r·∫•t cao!")
                                
                                with detail_tabs[1]:
                                    # Tab ph√¢n t√≠ch tƒ©nh
                                    st.markdown("#### Ph√¢n t√≠ch tƒ©nh")
                                    
                                    # Ph√¢n t√≠ch header PE n·∫øu l√† file PE
                                    try:
                                        import pefile
                                        pe = pefile.PE(data=file_bytes)
                                        
                                        # Th√¥ng tin c∆° b·∫£n v·ªÅ PE
                                        st.markdown("##### Th√¥ng tin PE Header")
                                        
                                        # Hi·ªÉn th·ªã th√¥ng tin Machine, TimeDateStamp, Characteristics
                                        timestamp = datetime.datetime.fromtimestamp(pe.FILE_HEADER.TimeDateStamp)
                                        
                                        pe_info = {
                                            "Machine": f"0x{pe.FILE_HEADER.Machine:04X} ({pefile.MACHINE_TYPE.get(pe.FILE_HEADER.Machine, 'Unknown')})",
                                            "S·ªë section": pe.FILE_HEADER.NumberOfSections,
                                            "Th·ªùi gian bi√™n d·ªãch": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
                                            "Characteristics": f"0x{pe.FILE_HEADER.Characteristics:04X}"
                                        }
                                        
                                        for key, value in pe_info.items():
                                            st.markdown(f"**{key}:** `{value}`")
                                        
                                        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ sections
                                        st.markdown("##### Sections")
                                        sections_data = []
                                        
                                        for section in pe.sections:
                                            section_name = section.Name.decode('utf-8', 'ignore').strip('\x00')
                                            section_entropy = section.get_entropy()
                                            sections_data.append({
                                                "T√™n": section_name,
                                                "Virtual Size": f"0x{section.Misc_VirtualSize:08X}",
                                                "Virtual Address": f"0x{section.VirtualAddress:08X}",
                                                "Raw Size": f"0x{section.SizeOfRawData:08X}",
                                                "Entropy": f"{section_entropy:.4f}",
                                                "ƒê√°nh gi√°": "C√≥ th·ªÉ ƒë√≥ng g√≥i/m√£ h√≥a" if section_entropy > 7.0 else "B√¨nh th∆∞·ªùng"
                                            })
                                        
                                        st.table(pd.DataFrame(sections_data))
                                        
                                        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ imports
                                        if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
                                            st.markdown("##### Imports")
                                            imports_data = []
                                            
                                            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                                                dll_name = entry.dll.decode('utf-8', 'ignore')
                                                for imp in entry.imports[:10]:  # Gi·ªõi h·∫°n 10 imports m·ªói DLL
                                                    if imp.name:
                                                        imp_name = imp.name.decode('utf-8', 'ignore')
                                                    else:
                                                        imp_name = f"Ordinal {imp.ordinal}"
                                                    imports_data.append({
                                                        "DLL": dll_name,
                                                        "Function": imp_name,
                                                        "Address": f"0x{imp.address:08X}"
                                                    })
                                            
                                            # Hi·ªÉn th·ªã 20 imports ƒë·∫ßu ti√™n
                                            st.dataframe(pd.DataFrame(imports_data[:20]))
                                            
                                            if len(imports_data) > 20:
                                                st.info(f"Hi·ªÉn th·ªã 20/{len(imports_data)} imports. M·ªü r·ªông ƒë·ªÉ xem t·∫•t c·∫£.")
                                                with st.expander("Xem t·∫•t c·∫£ imports"):
                                                    st.dataframe(pd.DataFrame(imports_data))
                                        
                                    except Exception as e:
                                        st.warning(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch file PE: {str(e)}")
                                        
                                        # Hi·ªÉn th·ªã th√¥ng tin hex dump n·∫øu kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c PE
                                        st.markdown("##### Hex Dump (64 bytes ƒë·∫ßu ti√™n)")
                                        hex_dump = ' '.join([f"{b:02X}" for b in file_bytes[:64]])
                                        ascii_dump = ''.join([chr(b) if 32 <= b <= 126 else '.' for b in file_bytes[:64]])
                                        
                                        st.code(f"Hex: {hex_dump}\nASCII: {ascii_dump}")
                                
                                with detail_tabs[2]:
                                    # Tab ph√¢n b·ªë byte
                                    st.markdown("#### Ph√¢n b·ªë byte")
                                    byte_counts = np.bincount(np.frombuffer(file_bytes, dtype=np.uint8), minlength=256)
                                    byte_df = pd.DataFrame({
                                        'Byte': range(256),
                                        'T·∫ßn su·∫•t': byte_counts
                                    })
                                    
                                    # Th√™m c·ªôt ASCII ƒë·ªÉ hi·ªÉn th·ªã k√Ω t·ª± t∆∞∆°ng ·ª©ng
                                    byte_df['ASCII'] = byte_df['Byte'].apply(lambda x: chr(x) if 32 <= x <= 126 else '.')
                                    
                                    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë byte
                                    st.bar_chart(byte_df.set_index('Byte')['T·∫ßn su·∫•t'])
                                    
                                    # Hi·ªÉn th·ªã th·ªëng k√™ v·ªÅ byte ph·ªï bi·∫øn nh·∫•t
                                    st.markdown("##### Byte ph·ªï bi·∫øn nh·∫•t")
                                    top_bytes = byte_df.sort_values('T·∫ßn su·∫•t', ascending=False).head(10)
                                    top_bytes['Ph·∫ßn trƒÉm'] = top_bytes['T·∫ßn su·∫•t'] / len(file_bytes) * 100
                                    st.table(top_bytes[['Byte', 'ASCII', 'T·∫ßn su·∫•t', 'Ph·∫ßn trƒÉm']])
                                    
                                with detail_tabs[3]:
                                    # Tab chu·ªói ƒë√°ng ch√∫ √Ω
                                    st.markdown("#### Chu·ªói ƒë√°ng ch√∫ √Ω")
                                    
                                    # Tr√≠ch xu·∫•t chu·ªói ASCII t·ª´ file
                                    import re
                                    ascii_strings = re.findall(b'[ -~]{5,}', file_bytes)
                                    ascii_strings = [s.decode('ascii', errors='ignore') for s in ascii_strings]
                                    
                                    # Danh s√°ch c√°c t·ª´ kh√≥a ƒë√°ng ng·ªù
                                    suspicious_keywords = [
                                        'http://', 'https://', 'cmd.exe', 'powershell', 'registry', 'RegCreateKey',
                                        'CreateProcess', 'VirtualAlloc', 'AES', 'RC4', 'XOR', 'URLDownload',
                                        'WinExec', 'ShellExecute', 'WriteProcessMemory', 'CreateRemoteThread',
                                        'SetWindowsHook', 'GetProcAddress', 'LoadLibrary', 'WSASocket',
                                        'InternetOpen', 'InternetConnect', 'InternetReadFile', 'InternetWriteFile'
                                    ]
                                    
                                    # L·ªçc chu·ªói ƒë√°ng ng·ªù
                                    suspicious_strings = []
                                    for string in ascii_strings:
                                        for keyword in suspicious_keywords:
                                            if keyword.lower() in string.lower():
                                                suspicious_strings.append({
                                                    'Chu·ªói': string,
                                                    'T·ª´ kh√≥a': keyword
                                                })
                                                break
                                    
                                    # Hi·ªÉn th·ªã chu·ªói ƒë√°ng ng·ªù
                                    if suspicious_strings:
                                        st.markdown("##### Chu·ªói ƒë√°ng ng·ªù")
                                        st.dataframe(pd.DataFrame(suspicious_strings))
                                        
                                        if any('http://' in s['Chu·ªói'] or 'https://' in s['Chu·ªói'] for s in suspicious_strings):
                                            st.warning("‚ö†Ô∏è Ph√°t hi·ªán URL - c√≥ th·ªÉ li√™n quan ƒë·∫øn C&C ho·∫∑c t·∫£i xu·ªëng")
                                        
                                        if any('cmd.exe' in s['Chu·ªói'] or 'powershell' in s['Chu·ªói'] for s in suspicious_strings):
                                            st.warning("‚ö†Ô∏è Ph√°t hi·ªán l·ªánh shell - c√≥ th·ªÉ th·ª±c thi m√£ ƒë·ªôc")
                                    else:
                                        st.info("Kh√¥ng ph√°t hi·ªán chu·ªói ƒë√°ng ng·ªù")
                                    
                                    # Thay th·∫ø expander b·∫±ng checkbox ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ chu·ªói
                                    show_all_strings = st.checkbox("Hi·ªÉn th·ªã t·∫•t c·∫£ chu·ªói", key="show_all_strings")
                                    
                                    if show_all_strings:
                                        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng chu·ªói hi·ªÉn th·ªã
                                        max_strings = 100
                                        limited_strings = ascii_strings[:max_strings]
                                        
                                        # T·∫°o container ƒë·ªÉ hi·ªÉn th·ªã chu·ªói
                                        string_container = st.container()
                                        with string_container:
                                            for i, string in enumerate(limited_strings):
                                                st.text(f"{i+1}. {string}")
                                        
                                        if len(ascii_strings) > max_strings:
                                            st.info(f"Hi·ªÉn th·ªã {max_strings}/{len(ascii_strings)} chu·ªói")

            st.markdown(
                """
                <style>
                    .info-text {
                        color: #888888; /* M√†u x√°m nh·∫°t */
                        font-size: 16px;
                        opacity: 0.7;   /* Ch√¨m nh·∫π */
                    }
                </style>
                <div class="info-text">‚ö†Ô∏è L∆∞u √Ω: H·ªá th·ªëng s·ª≠ d·ª•ng c√°c thu·∫≠t to√°n v√† m√¥ h√¨nh tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ ph√°t hi·ªán m√£ ƒë·ªôc, c√°c k·∫øt qu·∫£ ph√¢n t√≠ch kh√¥ng th·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c tuy·ªát ƒë·ªëi trong m·ªçi tr∆∞·ªùng h·ª£p!</div>
                """,
                unsafe_allow_html=True
            )


# --- Tab qu√©t th∆∞ m·ª•c ---
with tab2:
    st.markdown('<div class="sub-header">üìÅ Qu√©t th∆∞ m·ª•c ch·ª©a file .exe v√† .dll</div>', unsafe_allow_html=True)
    
    # Ki·ªÉm tra xem m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i ch∆∞a
    if model is None:
        st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i m√¥ h√¨nh tr∆∞·ªõc khi qu√©t th∆∞ m·ª•c!")
        st.info("üí° H√£y ch·ªçn ngu·ªìn m√¥ h√¨nh trong sidebar v√† t·∫£i m√¥ h√¨nh l√™n.")
    else:
        # ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c bi·∫øn
        show_clean_files = False
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            option = st.radio("Ch·ªçn c√°ch t·∫£i th∆∞ m·ª•c", ["T·∫£i l√™n file ZIP", "Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c"])
        
        with col2:
            scan_button = st.button("üîç B·∫Øt ƒë·∫ßu qu√©t", type="primary", use_container_width=True)

        if option == "T·∫£i l√™n file ZIP":
            zip_file = st.file_uploader("Ch·ªçn file ZIP ch·ª©a c√°c file c·∫ßn qu√©t", type=['zip'])
            if zip_file is not None and scan_button:
                with st.spinner("ƒêang gi·∫£i n√©n file ZIP..."):
                    temp_dir = extract_zip_to_temp(zip_file)
                    st.session_state['scan_dir'] = temp_dir
                    st.session_state['do_scan'] = True
                    
        elif option == "Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c":
            folder_path = st.text_input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c c·∫ßn qu√©t", 
                                placeholder="V√≠ d·ª•: C:\\Windows\\System32")
        
            if scan_button:
                if not folder_path:
                    st.markdown("""
                        <style>
                            .toast-alert {
                                animation: fadeInDown 0.5s;
                                background: #fff;
                                border-left: 5px solid #d7263d;
                                color: #222;
                                padding: 16px 22px;
                                border-radius: 8px;
                                font-weight: 500;
                                margin-top: 10px;
                                box-shadow: 0 6px 18px rgba(215,38,61,0.07);
                                font-size: 17px;
                                display: flex;
                                align-items: center;
                                gap: 10px;
                            }
                            @keyframes fadeInDown {
                                0% { opacity: 0; transform: translateY(-20px);}
                                100% { opacity: 1; transform: translateY(0);}
                            }
                        </style>
                        <div class="toast-alert">
                            <svg width="22" height="22" fill="none" style="margin-right:6px;"><circle cx="11" cy="11" r="11" fill="#d7263d"/><text x="11" y="16" font-size="13" text-anchor="middle" fill="#fff">!</text></svg>
                            Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c!
                        </div>
                    """, unsafe_allow_html=True)
                elif not os.path.isdir(folder_path):
                    st.markdown("""
                        <style>
                            .toast-alert {
                                animation: fadeInDown 0.5s;
                                background: #fff;
                                border-left: 5px solid #f39c12;
                                color: #222;
                                padding: 16px 22px;
                                border-radius: 8px;
                                font-weight: 500;
                                margin-top: 10px;
                                box-shadow: 0 6px 18px rgba(243,156,18,0.10);
                                font-size: 17px;
                                display: flex;
                                align-items: center;
                                gap: 10px;
                            }
                            @keyframes fadeInDown {
                                0% { opacity: 0; transform: translateY(-20px);}
                                100% { opacity: 1; transform: translateY(0);}
                            }
                        </style>
                        <div class="toast-alert">
                            <svg width="22" height="22" fill="none"
                            <svg width="22" height="22" fill="none" style="margin-right:6px;"><circle cx="11" cy="11" r="11" fill="#f39c12"/><text x="11" y="16" font-size="13" text-anchor="middle" fill="#fff">!</text></svg>
                            ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!
                        </div>
                    """, unsafe_allow_html=True)
                else:
                    st.session_state['scan_dir'] = folder_path
                    st.session_state['do_scan'] = True

        # # C·∫•u h√¨nh qu√©t n√¢ng cao
        # with st.expander("‚öôÔ∏è C·∫•u h√¨nh qu√©t n√¢ng cao"):
        #     col1, col2, col3 = st.columns(3)
            
        #     with col1:
        #         min_size_kb = st.number_input("K√≠ch th∆∞·ªõc file t·ªëi thi·ªÉu (KB)", value=0, min_value=0, max_value=1000)
                
        #     with col2:
        #         max_size_mb = st.number_input("K√≠ch th∆∞·ªõc file t·ªëi ƒëa (MB)", value=max_file_size, min_value=1, max_value=max_file_size)
                
        #     with col3:
        #         analysis_depth = st.selectbox("ƒê·ªô s√¢u ph√¢n t√≠ch", ["Nhanh", "C√¢n b·∫±ng", "S√¢u"])

        # Th·ª±c hi·ªán qu√©t n·∫øu c√≥ y√™u c·∫ßu
        if model is not None and 'do_scan' in st.session_state and st.session_state['do_scan']:
            scan_dir = st.session_state['scan_dir']
            with st.spinner("ƒêang qu√©t th∆∞ m·ª•c..."):
                results, malware_count, uncertain_count, total_files = scan_directory(
                    scan_dir, model, class_names, device, benign_classes, threshold
                )
            st.session_state['do_scan'] = False
            if results:
                    # Hi·ªÉn th·ªã t·ªïng quan k·∫øt qu·∫£
                    st.markdown('<div class="sub-header">üìä T·ªïng quan k·∫øt qu·∫£</div>', unsafe_allow_html=True)
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("T·ªïng s·ªë file", total_files)
                    
                    with col2:
                        st.metric("File m√£ ƒë·ªôc", malware_count, delta=f"{malware_count/total_files*100:.1f}%" if total_files > 0 else "0%")
                    
                    with col3:
                        benign_count = total_files - malware_count - uncertain_count
                        st.metric("File l√†nh t√≠nh", benign_count, delta=f"{benign_count/total_files*100:.1f}%" if total_files > 0 else "0%")
                    
                    with col4:
                        st.metric("Kh√¥ng ch·∫Øc ch·∫Øn", uncertain_count, delta=f"{uncertain_count/total_files*100:.1f}%" if total_files > 0 else "0%")

<<<<<<< HEAD
                    # T·∫°o bi·ªÉu ƒë·ªì tr√≤n
                    if total_files > 0:
                        benign_count = total_files - malware_count - uncertain_count
                        sizes = [malware_count, max(0, benign_count), uncertain_count]
                        if any(x < 0 for x in sizes):
                            sizes = [max(0, x) for x in sizes]
                        if sum(sizes) == 0:
                            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì tr√≤n.")
                        else:
                            fig, ax = plt.subplots(figsize=(8, 6))
                            labels = ['M√£ ƒë·ªôc', 'L√†nh t√≠nh', 'Kh√¥ng ch·∫Øc ch·∫Øn']
                            colors = ['#ff6b6b', '#51cf66', '#ffd43b']
                            explode = (0.1, 0, 0)
                            ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',
                                   shadow=True, startangle=90)
                            ax.set_title('Ph√¢n b·ªë k·∫øt qu·∫£ qu√©t')
                            st.pyplot(fig)
                            plt.close()
=======
                    # T√çNH NƒÇNG M·ªöI: Th√™m bi·ªÉu ƒë·ªì ph√¢n b·ªë lo·∫°i m√£ ƒë·ªôc
                    if results:
                        # T·∫•t c·∫£ c√°c code duy·ªát results n·∫±m ·ªü ƒë√¢y!
                        if malware_count > 0:
                            st.markdown("### üìä Ph√¢n b·ªë lo·∫°i m√£ ƒë·ªôc")
                            malware_types = {}
                            for r in results:
                
                            # T·∫°o DataFrame cho bi·ªÉu ƒë·ªì
                                malware_types = {}
                                for r in results:
                                    if r["L√† m√£ ƒë·ªôc"] and r["K·∫øt qu·∫£"] == 1:
                                        malware_type = r["Top d·ª± ƒëo√°n"][0]["L·ªõp"]
                                        if malware_type in malware_types:
                                            malware_types[malware_type] += 1
                                        else:
                                            malware_types[malware_type] = 1
                        
                        if malware_types:
                            malware_df = pd.DataFrame({
                                'Lo·∫°i m√£ ƒë·ªôc': list(malware_types.keys()),
                                'S·ªë l∆∞·ª£ng': list(malware_types.values())
                            })
                            
                        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                        col1, col2 = st.columns(2)
                        # BI·ªÇU ƒê·ªí C·ªòT
                        with col1:
                            num_types = len(malware_df['Lo·∫°i m√£ ƒë·ªôc'])
                            cmap = plt.get_cmap('tab10')
                            colors = [cmap(i % cmap.N) for i in range(num_types)]
                            
                            fig, ax = plt.subplots(figsize=(8, 5))  # Gi·ªØ nguy√™n k√≠ch th∆∞·ªõc
                            bars = ax.bar(
                                malware_df['Lo·∫°i m√£ ƒë·ªôc'],
                                malware_df['S·ªë l∆∞·ª£ng'],
                                width=0.3,
                                color=colors,        # Th√™m d√≤ng n√†y ƒë·ªÉ set m√†u theo tab10
                                edgecolor='gray',    # (t√πy ch·ªçn) th√™m ƒë∆∞·ªùng vi·ªÅn cho chuy√™n nghi·ªáp
                                linewidth=0.7
                            )
                            ax.set_ylabel('S·ªë l∆∞·ª£ng', fontsize=10)
                            ax.set_title('Ph√¢n b·ªë lo·∫°i m√£ ƒë·ªôc', fontsize=11)
                            ax.tick_params(axis='x', labelsize=9)
                            ax.tick_params(axis='y', labelsize=9)
                            plt.xticks(rotation=90, ha='right', fontsize=9)
                            plt.yticks(fontsize=9)
                            plt.tight_layout()
                            st.pyplot(fig)


                        # BI·ªÇU ƒê·ªí TR√íN
                        with col2:
                            fig, ax = plt.subplots(figsize=(5, 3))
                            def small_pct(pct):
                                return f'{pct:.1f}%' if pct > 2 else ''  # ch·ªâ hi·ªÉn th·ªã n·∫øu >2%
                            wedges, texts, autotexts = ax.pie(
                                malware_df['S·ªë l∆∞·ª£ng'],
                                labels=malware_df['Lo·∫°i m√£ ƒë·ªôc'],
                                autopct=small_pct,
                                textprops={'fontsize': 9}
                            )
                            for autotext in autotexts:
                                autotext.set_fontsize(8)  # font nh·ªè cho %
                            for text in texts:
                                text.set_fontsize(9)      # font nh·ªè cho label
                            ax.axis('equal')
                            plt.tight_layout()
                            st.pyplot(fig)

                    # # T·∫°o bi·ªÉu ƒë·ªì tr√≤n
                    # if total_files > 0:
                    #     benign_count = total_files - malware_count - uncertain_count
                    #     sizes = [malware_count, max(0, benign_count), uncertain_count]
                    #     if any(x < 0 for x in sizes):
                    #         sizes = [max(0, x) for x in sizes]
                    #     if sum(sizes) == 0:
                    #         st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì tr√≤n.")
                    #     else:
                    #         fig, ax = plt.subplots(figsize=(8, 6))
                    #         labels = ['M√£ ƒë·ªôc', 'L√†nh t√≠nh', 'Kh√¥ng ch·∫Øc ch·∫Øn']
                    #         colors = ['#ff6b6b', '#51cf66', '#ffd43b']
                    #         explode = (0.1, 0, 0)
                    #         ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',
                    #                shadow=True, startangle=90)
                    #         ax.set_title('Ph√¢n b·ªë k·∫øt qu·∫£ qu√©t')
                    #         st.pyplot(fig)
                    #         plt.close()
>>>>>>> 58fc52c (C·∫≠p nh·∫≠t code: s·ª≠a bug/th√™m t√≠nh nƒÉng XYZ)

                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
                    st.markdown('<div class="sub-header">üìã K·∫øt qu·∫£ chi ti·∫øt</div>', unsafe_allow_html=True)
                    
                    # T·∫°o tabs cho c√°c lo·∫°i k·∫øt qu·∫£
                    if malware_count > 0:
                        result_tabs = st.tabs(["üî¥ M√£ ƒë·ªôc", "‚úÖ L√†nh t√≠nh", "‚ö†Ô∏è Kh√¥ng ch·∫Øc ch·∫Øn", "üìä T·∫•t c·∫£"])
                    else:
                        result_tabs = st.tabs(["‚úÖ L√†nh t√≠nh", "‚ö†Ô∏è Kh√¥ng ch·∫Øc ch·∫Øn", "üìä T·∫•t c·∫£"])
                    
                    # Ph√¢n lo·∫°i k·∫øt qu·∫£
                    
                    malware_files = [r for r in results if r["L√† m√£ ƒë·ªôc"] and r["K·∫øt qu·∫£"] == 1]
                    benign_files = [r for r in results if not r["L√† m√£ ƒë·ªôc"] and r["K·∫øt qu·∫£"] == 0]
                    uncertain_files = [r for r in results if r["K·∫øt qu·∫£"] == 2]
                    
                    tab_index = 0
                    
                    # Tab m√£ ƒë·ªôc (ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥)
                    if malware_count > 0:
                        with result_tabs[tab_index]:
                            if malware_files:
                                st.error(f"‚ö†Ô∏è Ph√°t hi·ªán {len(malware_files)} file m√£ ƒë·ªôc!")
                                
                                # Hi·ªÉn th·ªã danh s√°ch file m√£ ƒë·ªôc
                                malware_df = pd.DataFrame([{
                                    "T√™n file": r["T√™n file"],
                                    "K√≠ch th∆∞·ªõc (KB)": r["K√≠ch th∆∞·ªõc (KB)"],
                                    "Lo·∫°i m√£ ƒë·ªôc": r["Lo·∫°i"],
                                    "X√°c su·∫•t": f"{r['X√°c su·∫•t']:.2%}",
                                    "ƒê∆∞·ªùng d·∫´n": r["ƒê∆∞·ªùng d·∫´n"]
                                } for r in malware_files])
                                
                                st.dataframe(malware_df, use_container_width=True)
                                
                                # N√∫t t·∫£i xu·ªëng danh s√°ch m√£ ƒë·ªôc
                                csv_malware = malware_df.to_csv(index=False)
                                st.download_button(
                                    label="üì• T·∫£i xu·ªëng danh s√°ch m√£ ƒë·ªôc (CSV)",
                                    data=csv_malware,
                                    file_name=f"malware_detected_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                    mime="text/csv"
                                )
                        tab_index += 1
                    
                    # Tab l√†nh t√≠nh
                    with result_tabs[tab_index]:
                        if benign_files:
                            st.success(f"‚úÖ {len(benign_files)} file ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† l√†nh t√≠nh")
                            
                            # Checkbox ƒë·ªÉ hi·ªÉn th·ªã file l√†nh t√≠nh
                            # show_clean_files = st.checkbox("Hi·ªÉn th·ªã danh s√°ch file l√†nh t√≠nh", value=False)
                            # show_clean_files = st.checkbox("Hi·ªÉn th·ªã danh s√°ch file l√†nh t√≠nh", value=False, key="show_clean_files_benign_tab")
                            
                            if show_clean_files:
                                benign_df = pd.DataFrame([{
                                "T√™n file": r["T√™n file"],
                                "K√≠ch th∆∞·ªõc (KB)": r["K√≠ch th∆∞·ªõc (KB)"],
                                "Lo·∫°i": r["Lo·∫°i"],
                                "K·∫øt qu·∫£": r["K·∫øt qu·∫£"],    # Th√™m d√≤ng n√†y ƒë·ªÉ debug
                                "X√°c su·∫•t": f"{r['X√°c su·∫•t']:.2%}",
                                "ƒê∆∞·ªùng d·∫´n": r["ƒê∆∞·ªùng d·∫´n"]
                            } for r in benign_files])
                                
                                st.dataframe(benign_df, use_container_width=True)
                        else:
                            st.info("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† l√†nh t√≠nh v·ªõi ƒë·ªô tin c·∫≠y cao")
                    tab_index += 1
                    
                    # Tab kh√¥ng ch·∫Øc ch·∫Øn
                    with result_tabs[tab_index]:
                        if uncertain_files:
                            st.warning(f"‚ö†Ô∏è {len(uncertain_files)} file c√≥ k·∫øt qu·∫£ kh√¥ng ch·∫Øc ch·∫Øn")
                            st.info("Nh·ªØng file n√†y c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra th√™m b·∫±ng c√°c c√¥ng c·ª• kh√°c")
                            
                            uncertain_df = pd.DataFrame([{
                                "T√™n file": r["T√™n file"],
                                "K√≠ch th∆∞·ªõc (KB)": r["K√≠ch th∆∞·ªõc (KB)"],
                                "Lo·∫°i": r["Lo·∫°i"],
                                "X√°c su·∫•t": f"{r['X√°c su·∫•t']:.2%}",
                                "ƒê∆∞·ªùng d·∫´n": r["ƒê∆∞·ªùng d·∫´n"]
                            } for r in uncertain_files])
                            
                            st.dataframe(uncertain_df, use_container_width=True)
                        else:
                            st.success("Kh√¥ng c√≥ file n√†o c√≥ k·∫øt qu·∫£ kh√¥ng ch·∫Øc ch·∫Øn")
                    
                    tab_index += 1
                    
                    # Tab t·∫•t c·∫£
                    with result_tabs[tab_index]:
                        st.info(f"Hi·ªÉn th·ªã t·∫•t c·∫£ {len(results)} file ƒë√£ qu√©t")
                        
                        # T·∫°o DataFrame v·ªõi t·∫•t c·∫£ k·∫øt qu·∫£
                        all_results_df = pd.DataFrame([{
                            "T√™n file": r["T√™n file"],
                            "K√≠ch th∆∞·ªõc (KB)": r["K√≠ch th∆∞·ªõc (KB)"],
                            "K·∫øt qu·∫£": "M√£ ƒë·ªôc" if r["L√† m√£ ƒë·ªôc"] and r["K·∫øt qu·∫£"] == 1 else 
                                     "L√†nh t√≠nh" if not r["L√† m√£ ƒë·ªôc"] and r["K·∫øt qu·∫£"] == 0 else "Kh√¥ng ch·∫Øc ch·∫Øn",
                            "Lo·∫°i": r["Lo·∫°i"],
                            "X√°c su·∫•t": f"{r['X√°c su·∫•t']:.2%}",
                            "ƒê∆∞·ªùng d·∫´n": r["ƒê∆∞·ªùng d·∫´n"]
                        } for r in results])
                        
                        st.dataframe(all_results_df, use_container_width=True)
                        
                        # N√∫t t·∫£i xu·ªëng t·∫•t c·∫£ k·∫øt qu·∫£
                        csv_all = all_results_df.to_csv(index=False)
                        st.download_button(
                            label="üì• T·∫£i xu·ªëng t·∫•t c·∫£ k·∫øt qu·∫£ (CSV)",
                            data=csv_all,
                            file_name=f"scan_results_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv"
                        )

                    # # Th·ªëng k√™ n√¢ng cao
                    # if analysis_depth == "S√¢u":
                    #     st.markdown('<div class="sub-header">üìà Th·ªëng k√™ n√¢ng cao</div>', unsafe_allow_html=True)
                        
                        # # Ph√¢n t√≠ch entropy
                        # entropy_values = [r["Entropy"] for r in scan_results if r["Entropy"] is not None]
                        # if entropy_values:
                        #     col1, col2 = st.columns(2)
                            
                        #     with col1:
                        #         st.markdown("##### Ph√¢n b·ªë Entropy")
                        #         fig, ax = plt.subplots(figsize=(8, 4))
                        #         ax.hist(entropy_values, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
                        #         ax.set_xlabel('Entropy')
                        #         ax.set_ylabel('S·ªë l∆∞·ª£ng file')
                        #         ax.set_title('Ph√¢n b·ªë Entropy c·ªßa c√°c file')
                        #         st.pyplot(fig)
                        #         plt.close()
                            
                        #     with col2:
                        #         st.markdown("##### Th·ªëng k√™ Entropy")
                        #         st.write(f"**Entropy trung b√¨nh:** {np.mean(entropy_values):.4f}")
                        #         st.write(f"**Entropy cao nh·∫•t:** {np.max(entropy_values):.4f}")
                        #         st.write(f"**Entropy th·∫•p nh·∫•t:** {np.min(entropy_values):.4f}")
                        #         st.write(f"**ƒê·ªô l·ªách chu·∫©n:** {np.std(entropy_values):.4f}")
                                
                        #         # C·∫£nh b√°o v·ªÅ entropy cao
                        #         high_entropy_files = [r for r in scan_results if r["Entropy"] and r["Entropy"] > 7.0]
                        #         if high_entropy_files:
                        #             st.warning(f"‚ö†Ô∏è {len(high_entropy_files)} file c√≥ entropy > 7.0 (c√≥ th·ªÉ ƒë∆∞·ª£c ƒë√≥ng g√≥i/m√£ h√≥a)")

                        # else:
                        #     st.warning("Kh√¥ng t√¨m th·∫•y file .exe ho·∫∑c .dll n√†o trong th∆∞ m·ª•c ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.")
            
            # D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m n·∫øu c·∫ßn
            if option == "T·∫£i l√™n file ZIP" and 'scan_dir' in st.session_state:
                try:
                    shutil.rmtree(st.session_state['scan_dir'])
                    del st.session_state['scan_dir']
                except:
                    pass
<<<<<<< HEAD
=======

            st.markdown(
                """
                <style>
                    .info-text {
                        color: #888888; /* M√†u x√°m nh·∫°t */
                        font-size: 16px;
                        opacity: 0.7;   /* Ch√¨m nh·∫π */
                    }
                </style>
                <div class="info-text">‚ö†Ô∏è L∆∞u √Ω: H·ªá th·ªëng s·ª≠ d·ª•ng c√°c thu·∫≠t to√°n v√† m√¥ h√¨nh tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ ph√°t hi·ªán m√£ ƒë·ªôc, c√°c k·∫øt qu·∫£ ph√¢n t√≠ch kh√¥ng th·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c tuy·ªát ƒë·ªëi trong m·ªçi tr∆∞·ªùng h·ª£p!</div>
                """,
                unsafe_allow_html=True
            )
      
>>>>>>> 58fc52c (C·∫≠p nh·∫≠t code: s·ª≠a bug/th√™m t√≠nh nƒÉng XYZ)
with tab3:
     # Hi·ªÉn th·ªã b·∫£n ƒë·ªì Vi·ªát Nam v·ªõi th√¥ng tin v·ªÅ m·ªëi ƒëe d·ªça
        st.markdown('<div class="map-header">üó∫Ô∏è Gi√°m s√°t an ninh m·∫°ng qu·ªëc gia: B·∫£n ƒë·ªì Vi·ªát Nam</div>', unsafe_allow_html=True)

        # T·∫°o HTML cho b·∫£n ƒë·ªì
        map_html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Vietnam Cybersecurity Threat Map</title>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
            <style>
                body { margin: 0; padding: 0; }
                #map { height: 500px; width: 100%; }
                .threat-info {
                    background: rgba(255, 255, 255, 0.9);
                    padding: 10px;
                    border-radius: 5px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
                }
                .threat-level-high { color: #d32f2f; font-weight: bold; }
                .threat-level-medium { color: #f57c00; font-weight: bold; }
                .threat-level-low { color: #388e3c; font-weight: bold; }
            </style>
        </head>
        <body>
            <div id="map"></div>
            <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
            <script>
                // Kh·ªüi t·∫°o b·∫£n ƒë·ªì t·∫≠p trung v√†o Vi·ªát Nam
                var map = L.map('map').setView([16.0583, 108.2772], 6);
                // Th√™m tile layer
                L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {attribution: '¬© OpenStreetMap, ¬© CartoDB'}).addTo(map);
                // D·ªØ li·ªáu m·ªëi ƒëe d·ªça gi·∫£ l·∫≠p 63 t·ªânh/th√†nh Vi·ªát Nam 2024
                var threatData = [
                    // Nh√≥m High (t·ª´ 700+)
                    {city: "TP. H·ªì Ch√≠ Minh", lat: 10.7769, lng: 106.7009, threats: 2100, level: "high", malware: 750, phishing: 520, ddos: 315, other: 515},
                    {city: "H√† N·ªôi", lat: 21.0285, lng: 105.8542, threats: 1480, level: "high", malware: 525, phishing: 365, ddos: 212, other: 378},
                    {city: "B√¨nh D∆∞∆°ng", lat: 10.9804, lng: 106.6519, threats: 855, level: "high", malware: 312, phishing: 201, ddos: 121, other: 221},
                    {city: "ƒê·ªìng Nai", lat: 10.9452, lng: 106.8246, threats: 802, level: "high", malware: 285, phishing: 189, ddos: 116, other: 212},

                    // Nh√≥m Medium (300‚Äì700)
                    {city: "H·∫£i Ph√≤ng", lat: 20.8449, lng: 106.6881, threats: 626, level: "medium", malware: 213, phishing: 168, ddos: 104, other: 141},
                    {city: "C·∫ßn Th∆°", lat: 10.0452, lng: 105.7469, threats: 563, level: "medium", malware: 186, phishing: 153, ddos: 80, other: 144},
                    {city: "ƒê√† N·∫µng", lat: 16.0544, lng: 108.2022, threats: 488, level: "medium", malware: 159, phishing: 126, ddos: 74, other: 129},
                    {city: "Thanh H√≥a", lat: 19.8072, lng: 105.7768, threats: 473, level: "medium", malware: 154, phishing: 121, ddos: 77, other: 121},
                    {city: "Ngh·ªá An", lat: 18.6796, lng: 105.6813, threats: 452, level: "medium", malware: 147, phishing: 115, ddos: 70, other: 120},
                    {city: "Qu·∫£ng Ninh", lat: 21.0064, lng: 107.2925, threats: 441, level: "medium", malware: 141, phishing: 112, ddos: 66, other: 122},
                    {city: "Th·ª´a Thi√™n Hu·∫ø", lat: 16.4637, lng: 107.5909, threats: 407, level: "medium", malware: 135, phishing: 98, ddos: 62, other: 112},
                    {city: "H·∫£i D∆∞∆°ng", lat: 20.9401, lng: 106.3336, threats: 396, level: "medium", malware: 123, phishing: 101, ddos: 62, other: 110},
                    {city: "B·∫Øc Ninh", lat: 21.1861, lng: 106.0763, threats: 384, level: "medium", malware: 118, phishing: 95, ddos: 66, other: 105},
                    {city: "Th√°i B√¨nh", lat: 20.4509, lng: 106.3406, threats: 376, level: "medium", malware: 112, phishing: 92, ddos: 65, other: 107},
                    {city: "Vƒ©nh Ph√∫c", lat: 21.3081, lng: 105.6046, threats: 372, level: "medium", malware: 109, phishing: 90, ddos: 62, other: 111},
                    {city: "B·∫Øc Giang", lat: 21.2731, lng: 106.1946, threats: 361, level: "medium", malware: 106, phishing: 84, ddos: 66, other: 105},
                    {city: "Nam ƒê·ªãnh", lat: 20.4388, lng: 106.1621, threats: 358, level: "medium", malware: 103, phishing: 88, ddos: 61, other: 106},
                    {city: "Ph√∫ Th·ªç", lat: 21.3457, lng: 105.2120, threats: 347, level: "medium", malware: 100, phishing: 85, ddos: 55, other: 107},
                    {city: "Qu·∫£ng Nam", lat: 15.5394, lng: 108.0191, threats: 341, level: "medium", malware: 98, phishing: 83, ddos: 54, other: 106},

                    // Nh√≥m Low (d∆∞·ªõi 300)
                    {city: "B√¨nh ƒê·ªãnh", lat: 13.7820, lng: 109.2191, threats: 298, level: "low", malware: 85, phishing: 76, ddos: 46, other: 91},
                    {city: "Qu·∫£ng Ng√£i", lat: 15.1202, lng: 108.7922, threats: 286, level: "low", malware: 84, phishing: 63, ddos: 43, other: 96},
                    {city: "L√¢m ƒê·ªìng", lat: 11.5753, lng: 108.1429, threats: 275, level: "low", malware: 78, phishing: 59, ddos: 40, other: 98},
                    {city: "Ki√™n Giang", lat: 10.0086, lng: 105.0807, threats: 265, level: "low", malware: 75, phishing: 58, ddos: 36, other: 96},
                    {city: "Long An", lat: 10.5435, lng: 106.4106, threats: 257, level: "low", malware: 72, phishing: 55, ddos: 38, other: 92},
                    {city: "B·∫øn Tre", lat: 10.2415, lng: 106.3754, threats: 243, level: "low", malware: 69, phishing: 52, ddos: 33, other: 89},
                    {city: "An Giang", lat: 10.5216, lng: 105.1259, threats: 239, level: "low", malware: 67, phishing: 54, ddos: 31, other: 87},
                    {city: "ƒê·∫Øk L·∫Øk", lat: 12.7100, lng: 108.2378, threats: 233, level: "low", malware: 65, phishing: 47, ddos: 32, other: 89},
                    {city: "Ti·ªÅn Giang", lat: 10.4493, lng: 106.3421, threats: 231, level: "low", malware: 66, phishing: 46, ddos: 31, other: 88},
                    {city: "B√† R·ªãa - V≈©ng T√†u", lat: 10.5418, lng: 107.2428, threats: 228, level: "low", malware: 64, phishing: 49, ddos: 28, other: 87},
                    {city: "Qu·∫£ng B√¨nh", lat: 17.4689, lng: 106.6228, threats: 224, level: "low", malware: 62, phishing: 44, ddos: 31, other: 87},
                    {city: "T√¢y Ninh", lat: 11.3352, lng: 106.1099, threats: 220, level: "low", malware: 61, phishing: 43, ddos: 29, other: 87},
                    {city: "Th√°i Nguy√™n", lat: 21.5672, lng: 105.8252, threats: 217, level: "low", malware: 60, phishing: 42, ddos: 28, other: 87},
                    {city: "Vƒ©nh Long", lat: 10.2536, lng: 105.9722, threats: 211, level: "low", malware: 59, phishing: 41, ddos: 25, other: 86},
                    {city: "Qu·∫£ng Tr·ªã", lat: 16.8187, lng: 107.0917, threats: 207, level: "low", malware: 57, phishing: 40, ddos: 26, other: 84},
                    {city: "S√≥c TrƒÉng", lat: 9.6026, lng: 105.9731, threats: 203, level: "low", malware: 56, phishing: 39, ddos: 25, other: 83},
                    {city: "Gia Lai", lat: 13.8079, lng: 108.1095, threats: 200, level: "low", malware: 54, phishing: 37, ddos: 24, other: 85},
                    {city: "B·∫°c Li√™u", lat: 9.2941, lng: 105.7278, threats: 199, level: "low", malware: 54, phishing: 38, ddos: 23, other: 84},
                    {city: "H√† Tƒ©nh", lat: 18.3559, lng: 105.8875, threats: 197, level: "low", malware: 52, phishing: 38, ddos: 24, other: 83},
                    {city: "Ninh B√¨nh", lat: 20.2506, lng: 105.9745, threats: 194, level: "low", malware: 52, phishing: 36, ddos: 22, other: 84},
                    {city: "H∆∞ng Y√™n", lat: 20.6463, lng: 106.0511, threats: 192, level: "low", malware: 51, phishing: 35, ddos: 22, other: 84},
                    {city: "ƒê·∫Øk N√¥ng", lat: 12.2644, lng: 107.6098, threats: 188, level: "low", malware: 49, phishing: 34, ddos: 21, other: 84},
                    {city: "Tuy√™n Quang", lat: 21.8230, lng: 105.2148, threats: 185, level: "low", malware: 49, phishing: 33, ddos: 21, other: 82},
                    {city: "Ph√∫ Y√™n", lat: 13.0882, lng: 109.0929, threats: 181, level: "low", malware: 48, phishing: 31, ddos: 22, other: 80},
                    {city: "B√¨nh Ph∆∞·ªõc", lat: 11.7512, lng: 106.7235, threats: 178, level: "low", malware: 47, phishing: 31, ddos: 20, other: 80},
                    {city: "Vƒ©nh Long", lat: 10.2536, lng: 105.9722, threats: 175, level: "low", malware: 46, phishing: 30, ddos: 20, other: 79},
                    {city: "H√† Nam", lat: 20.5833, lng: 105.9160, threats: 174, level: "low", malware: 45, phishing: 31, ddos: 19, other: 79},
                    {city: "Y√™n B√°i", lat: 21.7051, lng: 104.8800, threats: 173, level: "low", malware: 44, phishing: 31, ddos: 18, other: 80},
                    {city: "C√† Mau", lat: 9.1768, lng: 105.1500, threats: 172, level: "low", malware: 43, phishing: 30, ddos: 18, other: 81},
                    {city: "L√†o Cai", lat: 22.4804, lng: 103.9756, threats: 170, level: "low", malware: 42, phishing: 30, ddos: 18, other: 80},
                    {city: "Kon Tum", lat: 14.3549, lng: 108.0076, threats: 168, level: "low", malware: 41, phishing: 29, ddos: 17, other: 81},
                    {city: "H√≤a B√¨nh", lat: 20.8171, lng: 105.3376, threats: 167, level: "low", malware: 41, phishing: 28, ddos: 17, other: 81},
                    {city: "Tr√† Vinh", lat: 9.9347, lng: 106.3452, threats: 163, level: "low", malware: 41, phishing: 27, ddos: 16, other: 79},
                    {city: "L·∫°ng S∆°n", lat: 21.8528, lng: 106.7610, threats: 159, level: "low", malware: 40, phishing: 27, ddos: 16, other: 76},
                    {city: "Qu·∫£ng Nam", lat: 15.5394, lng: 108.0191, threats: 158, level: "low", malware: 39, phishing: 27, ddos: 15, other: 77},
                    {city: "B·∫Øc K·∫°n", lat: 22.1485, lng: 105.8348, threats: 156, level: "low", malware: 39, phishing: 25, ddos: 15, other: 77},
                    {city: "Cao B·∫±ng", lat: 22.6666, lng: 106.2579, threats: 154, level: "low", malware: 38, phishing: 25, ddos: 14, other: 77},
                    {city: "B√¨nh Thu·∫≠n", lat: 11.0904, lng: 108.0721, threats: 153, level: "low", malware: 37, phishing: 26, ddos: 13, other: 77},
                    {city: "ƒêi·ªán Bi√™n", lat: 21.3860, lng: 103.0230, threats: 151, level: "low", malware: 36, phishing: 24, ddos: 14, other: 77},
                    {city: "Ninh Thu·∫≠n", lat: 11.6739, lng: 109.0147, threats: 149, level: "low", malware: 35, phishing: 24, ddos: 13, other: 77},
                    {city: "H√† Giang", lat: 22.8233, lng: 104.9836, threats: 147, level: "low", malware: 34, phishing: 23, ddos: 13, other: 77},
                    {city: "Qu·∫£ng Ng√£i", lat: 15.1202, lng: 108.7922, threats: 146, level: "low", malware: 33, phishing: 23, ddos: 12, other: 78},
                    {city: "S∆°n La", lat: 21.3256, lng: 103.9188, threats: 144, level: "low", malware: 33, phishing: 23, ddos: 12, other: 76},
                    {city: "B·∫Øc Ninh", lat: 21.1861, lng: 106.0763, threats: 143, level: "low", malware: 32, phishing: 22, ddos: 12, other: 77},
                    {city: "Ph√∫ Th·ªç", lat: 21.3457, lng: 105.2120, threats: 139, level: "low", malware: 31, phishing: 21, ddos: 11, other: 76},
                    {city: "Kh√°nh H√≤a", lat: 12.2388, lng: 109.1967, threats: 126, level: "low", malware: 27, phishing: 18, ddos: 10, other: 71},
                    {city: "H·∫≠u Giang", lat: 9.7845, lng: 105.4701, threats: 123, level: "low", malware: 26, phishing: 17, ddos: 9, other: 71},
                    // ... (b·∫°n c√≥ th·ªÉ th√™m ti·∫øp c√°c huy·ªán/th·ªã x√£ n·∫øu c·∫ßn)
                ];

                // H√†m x√°c ƒë·ªãnh m√†u s·∫Øc d·ª±a tr√™n m·ª©c ƒë·ªô ƒëe d·ªça
                function getThreatColor(level) {
                    switch(level) {
                        case 'high': return '#d32f2f';
                        case 'medium': return '#f57c00';
                        case 'low': return '#388e3c';
                        default: return '#666666';
                    }
                }
                
                // H√†m x√°c ƒë·ªãnh k√≠ch th∆∞·ªõc marker d·ª±a tr√™n s·ªë l∆∞·ª£ng ƒëe d·ªça
                function getMarkerSize(threats) {
                    if (threats > 1000) return 25;
                    if (threats > 500) return 15;
                    if (threats > 200) return 10;
                    return 10;
                }
                
                // Th√™m markers cho t·ª´ng th√†nh ph·ªë
                threatData.forEach(function(data) {
                    var color = getThreatColor(data.level);
                    var size = getMarkerSize(data.threats);
                    
                    // T·∫°o custom icon
                    var threatIcon = L.divIcon({
                        className: 'threat-marker',
                        html: '<div style="background-color: ' + color + '; width: ' + size + 'px; height: ' + size + 'px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);"></div>',
                        iconSize: [size, size],
                        iconAnchor: [size/2, size/2]
                    });
                    
                    // T·∫°o popup content
                    var popupContent = `
                        <div class="threat-info">
                            <h3>${data.city}</h3>
                            <p><strong>T·ªïng m·ªëi ƒëe d·ªça:</strong> <span class="threat-level-${data.level}">${data.threats}</span></p>
                            <hr>
                            <p><strong>Ph√¢n lo·∫°i:</strong></p>
                            <ul>
                                <li>ü¶† Malware: ${data.malware}</li>
                                <li>üé£ Phishing: ${data.phishing}</li>
                                <li>‚ö° DDoS: ${data.ddos}</li>
                                <li>üîß Kh√°c: ${data.other}</li>
                            </ul>
                            <p><strong>M·ª©c ƒë·ªô:</strong> <span class="threat-level-${data.level}">${data.level.toUpperCase()}</span></p>
                        </div>
                    `;
                    
                    // Th√™m marker v√†o b·∫£n ƒë·ªì
                    L.marker([data.lat, data.lng], {icon: threatIcon})
                        .bindPopup(popupContent)
                        .addTo(map);
                });
                
                // Th√™m legend
                var legend = L.control({position: 'bottomright'});
                legend.onAdd = function (map) {
                    var div = L.DomUtil.create('div', 'info legend');
                    div.innerHTML = `
                        <div style="background: rgba(255,255,255,0.9); padding: 10px; border-radius: 5px; box-shadow: 0 1px 10px rgba(0,0,0,0.2);">
                            <h4>M·ª©c ƒë·ªô ƒëe d·ªça</h4>
                            <div><span style="color: #d32f2f;">‚óè</span> Cao (>1000)</div>
                            <div><span style="color: #f57c00;">‚óè</span> Trung b√¨nh (200-1000)</div>
                            <div><span style="color: #388e3c;">‚óè</span> Th·∫•p (<200)</div>
                            <hr>
                            <small>D·ªØ li·ªáu c·∫≠p nh·∫≠t: ${new Date().toLocaleDateString('vi-VN')}</small>
                        </div>
                    `;
                    return div;
                };
                legend.addTo(map);
                
                // Th√™m th√¥ng tin t·ªïng quan
                var info = L.control({position: 'topleft'});
                info.onAdd = function (map) {
                    var div = L.DomUtil.create('div', 'info');
                    var totalThreats = threatData.reduce((sum, data) => sum + data.threats, 0);
                    div.innerHTML = `
                        <div style="background: rgba(255,255,255,0.9); padding: 15px; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.2);">
                            <h3>üáªüá≥ T√¨nh h√¨nh An ninh m·∫°ng Vi·ªát Nam</h3>
                            <p><strong>T·ªïng m·ªëi ƒëe d·ªça:</strong> <span style="color: #d32f2f; font-weight: bold;">${totalThreats}</span></p>
                            <p><strong>Khu v·ª±c nguy hi·ªÉm nh·∫•t:</strong> TP. H·ªì Ch√≠ Minh</p>
                            <p><strong>Lo·∫°i ƒëe d·ªça ph·ªï bi·∫øn:</strong> Malware</p>
                            <hr>
                            <small>‚ö†Ô∏èD·ªØ li·ªáu s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch minh h·ªça</small>
                        </div>
                    `;
                    return div;
                };
                info.addTo(map);

                
                // Th√™m hi·ªáu ·ª©ng pulse cho c√°c marker c√≥ m·ª©c ƒëe d·ªça cao
                threatData.forEach(function(data) {
                    if (data.level === 'high') {
                        var pulseIcon = L.divIcon({
                            className: 'pulse-marker',
                            html: '<div class="pulse-dot"></div>',
                            iconSize: [20, 20],
                            iconAnchor: [10, 10]
                        });
                        
                        L.marker([data.lat, data.lng], {icon: pulseIcon}).addTo(map);
                    }
                });
                
                // CSS cho hi·ªáu ·ª©ng pulse
                var style = document.createElement('style');
                style.innerHTML = `
                    .pulse-dot {
                        width: 20px;
                        height: 20px;
                        background-color: #d32f2f;
                        border-radius: 50%;
                        animation: pulse 2s infinite;
                        opacity: 0.8;
                    }
                    
                    @keyframes pulse {
                        0% {
                            transform: scale(0.8);
                            opacity: 1;
                        }
                        50% {
                            transform: scale(1.2);
                            opacity: 0.5;
                        }
                        100% {
                            transform: scale(0.8);
                            opacity: 1;
                        }
                    }
                `;
                document.head.appendChild(style);
                
            </script>
        </body>
        </html>
        """

        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì
        st.components.v1.html(map_html, height=500)

        # Th√™m th√¥ng tin c·∫£nh b√°o b·∫£o m·∫≠t
        st.markdown('<div class="sub-header">üö® C·∫£nh b√°o B·∫£o m·∫≠t</div>', unsafe_allow_html=True)

        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("""
            <div style="background: linear-gradient(135deg, #ff6b6b, #ee5a52); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                <h4>‚ö†Ô∏è M·ª©c ƒë·ªô ƒëe d·ªça</h4>
                <h2>CAO</h2>
                <p>Ph√°t hi·ªán nhi·ªÅu m√£ ƒë·ªôc m·ªõi</p>
                <small>C·∫≠p nh·∫≠t: H√¥m nay</small>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
            <div style="background: linear-gradient(135deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                <h4>üõ°Ô∏è T·ª∑ l·ªá ph√°t hi·ªán</h4>
                <h2>94.7%</h2>
                <p>ƒê·ªô ch√≠nh x√°c c·ªßa h·ªá th·ªëng</p>
                <small>D·ª±a tr√™n 10,000+ m·∫´u</small>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            st.markdown("""
            <div style="background: linear-gradient(135deg, #45b7d1, #96c93d); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                <h4>üìä Files ƒë√£ qu√©t</h4>
                <h2>2,847</h2>
                <p>Trong th√°ng n√†y</p>
                <small>TƒÉng 23% so v·ªõi th√°ng tr∆∞·ªõc</small>
            </div>
            """, unsafe_allow_html=True)

        # Th√™m RSS feed gi·∫£ l·∫≠p v·ªÅ tin t·ª©c b·∫£o m·∫≠t
        st.markdown('<div class="sub-header">üì∞ Tin t·ª©c B·∫£o m·∫≠t m·ªõi nh·∫•t</div>', unsafe_allow_html=True)

        news_data = [
            {
                "title": "Ph√°t hi·ªán bi·∫øn th·ªÉ m·ªõi c·ªßa ransomware LockBit t·∫°i Vi·ªát Nam",
                "summary": "C√°c chuy√™n gia b·∫£o m·∫≠t c·∫£nh b√°o v·ªÅ s·ª± xu·∫•t hi·ªán c·ªßa bi·∫øn th·ªÉ m·ªõi c·ªßa ransomware LockBit ƒëang nh·∫Øm m·ª•c ti√™u v√†o c√°c doanh nghi·ªáp Vi·ªát Nam.",
                "time": "2 gi·ªù tr∆∞·ªõc",
                "severity": "high"
            },
            {
                "title": "C·∫≠p nh·∫≠t b·∫£n v√° b·∫£o m·∫≠t kh·∫©n c·∫•p cho Windows",
                "summary": "Microsoft ph√°t h√†nh b·∫£n v√° kh·∫©n c·∫•p ƒë·ªÉ s·ª≠a l·ªói zero-day ƒëang ƒë∆∞·ª£c khai th√°c t√≠ch c·ª±c b·ªüi c√°c nh√≥m APT.",
                "time": "5 gi·ªù tr∆∞·ªõc", 
                "severity": "high"
            },
            {
                "title": "Chi·∫øn d·ªãch phishing m·∫°o danh ng√¢n h√†ng gia tƒÉng",
                "summary": "S·ªë l∆∞·ª£ng email phishing m·∫°o danh c√°c ng√¢n h√†ng l·ªõn t·∫°i Vi·ªát Nam tƒÉng 45% trong tu·∫ßn qua.",
                "time": "1 ng√†y tr∆∞·ªõc",
                "severity": "medium"
            },
            {
                "title": "H∆∞·ªõng d·∫´n b·∫£o v·ªá h·ªá th·ªëng kh·ªèi malware m·ªõi",
                "summary": "C√°c bi·ªán ph√°p ph√≤ng ng·ª´a v√† ph√°t hi·ªán s·ªõm c√°c lo·∫°i malware m·ªõi xu·∫•t hi·ªán g·∫ßn ƒë√¢y.",
                "time": "2 ng√†y tr∆∞·ªõc",
                "severity": "low"
            }
        ]

        for news in news_data:
            severity_color = {"high": "#ff6b6b", "medium": "#ffd43b", "low": "#51cf66"}[news["severity"]]
            severity_text = {"high": "üî¥ Nghi√™m tr·ªçng", "medium": "üü° Trung b√¨nh", "low": "üü¢ Th√¥ng tin"}[news["severity"]]
            
            st.markdown(f"""
            <div style="border-left: 4px solid {severity_color}; background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 0 5px 5px 0;">
                <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 8px;">
                    <h4 style="margin: 0; color: #333;">{news['title']}</h4>
                    <span style="color: {severity_color}; font-size: 0.9em; font-weight: bold;">{severity_text}</span>
                </div>
                <p style="margin: 8px 0; color: #666; line-height: 1.5;">{news['summary']}</p>
                <small style="color: #999;">‚è∞ {news['time']}</small>
            </div>
            """, unsafe_allow_html=True)

        # Th√™m bi·ªÉu ƒë·ªì th·ªëng k√™ th·ªùi gian th·ª±c
        st.markdown('<div class="sub-header">üìà Th·ªëng k√™ Th·ªùi gian th·ª±c</div>', unsafe_allow_html=True)

        # T·∫°o d√£y ng√†y
        dates = pd.date_range(start='2024-07-01', end='2025-06-30', freq='D')

        # Thi·∫øt l·∫≠p seed ƒë·ªÉ t√°i l·∫≠p k·∫øt qu·∫£
        np.random.seed(42)

        # T·∫°o h·ªá s·ªë dao ƒë·ªông cho t·ª´ng th√°ng (gi·∫£ l·∫≠p xu h∆∞·ªõng th·ª±c t·∫ø: cu·ªëi nƒÉm tƒÉng, ƒë·∫ßu nƒÉm gi·∫£m)
        monthly_malware_base = {
            7:  14,  8: 13,  9: 16, 10: 19, 11: 22, 12: 28,  # T·ª´ th√°ng 7 ƒë·∫øn th√°ng 12/2024
            1:  32,  2: 29,  3: 22,  4: 18,  5: 16,  6: 15   # T·ª´ th√°ng 1 ƒë·∫øn th√°ng 6/2025
        }
        monthly_clean_base = {
            7:  55,  8: 56,  9: 58, 10: 62, 11: 66, 12: 70,
            1:  75,  2: 70,  3: 65,  4: 60,  5: 58,  6: 56
        }

        dates = pd.date_range(start='2024-07-01', end='2025-06-30', freq='D')
        np.random.seed(42)

        malware_detections = []
        clean_files = []
        base_mal = 10
        base_clean = 50
        trend_increase = 0.08  # m·ª©c tƒÉng nh·∫π theo ng√†y

        for i, d in enumerate(dates):
            # Dao ƒë·ªông m·∫°nh quanh gi√° tr·ªã trung b√¨nh nh∆∞ng v·∫´n tƒÉng d·∫ßn theo th·ªùi gian
            daily_mal = base_mal + (i * trend_increase) + np.random.normal(0, 5)
            daily_clean = base_clean + (i * trend_increase * 2) + np.random.normal(0, 12)
            malware_detections.append(max(0, int(daily_mal)))
            clean_files.append(max(0, int(daily_clean)))

        stats_df = pd.DataFrame({
            'Ng√†y': dates,
            'M√£ ƒë·ªôc ph√°t hi·ªán': malware_detections,
            'File l√†nh t√≠nh': clean_files,
            'T·ªïng file qu√©t': np.array(malware_detections) + np.array(clean_files)
        })

        # Optional: Xem th·ª≠ th·ªëng k√™ theo th√°ng
        #print(stats_df.groupby(stats_df['Ng√†y'].dt.month)[['M√£ ƒë·ªôc ph√°t hi·ªán', 'File l√†nh t√≠nh']].mean())

        # T·∫°o tabs cho c√°c bi·ªÉu ƒë·ªì kh√°c nhau
        chart_tabs = st.tabs(["üìä T·ªïng quan", "ü¶† M√£ ƒë·ªôc", "üìà Xu h∆∞·ªõng", "üåç Ph√¢n b·ªë ƒë·ªãa l√Ω"])

        with chart_tabs[0]:
            
            # Bi·ªÉu ƒë·ªì c·ªôt
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # L·∫•y d·ªØ li·ªáu theo th√°ng - S·ª¨A L·ªñI ·ªû ƒê√ÇY
            monthly_stats = stats_df.groupby(stats_df['Ng√†y'].dt.to_period('M')).agg({
                'M√£ ƒë·ªôc ph√°t hi·ªán': 'sum',
                'File l√†nh t√≠nh': 'sum',
                'T·ªïng file qu√©t': 'sum'
            })
            
            x = range(len(monthly_stats))
            width = 0.35
            
            ax.bar([i - width/2 for i in x], monthly_stats['M√£ ƒë·ªôc ph√°t hi·ªán'], width, 
                label='M√£ ƒë·ªôc ph√°t hi·ªán', color='#ff6b6b', alpha=0.8)
            ax.bar([i + width/2 for i in x], monthly_stats['File l√†nh t√≠nh'], width,
                label='File l√†nh t√≠nh', color='#51cf66', alpha=0.8)
            
            ax.set_xlabel('Th√°ng')
            ax.set_ylabel('S·ªë l∆∞·ª£ng file')
            ax.set_title('Th·ªëng k√™ ph√°t hi·ªán m√£ ƒë·ªôc theo th√°ng')
            ax.set_xticks(x)
            ax.set_xticklabels([str(period) for period in monthly_stats.index])
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            plt.xticks(rotation=45)
            plt.tight_layout()
            st.pyplot(fig)
            plt.close()

        with chart_tabs[1]:
            # L·∫•y d·ªØ li·ªáu v√† s·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng gi·∫£m d·∫ßn
            malware_types_full = [
                'Adware', 'Backdoor', 'Dialer', 'Obfuscated mal', 'PWS', 'Rogue',
                'TDownloader', 'Trojan', 'TrojanDownl', 'Virus', 'Worm'
            ]
            malware_counts_full = [
                4961, 5669, 553, 1228, 679, 381, 564, 5852, 848, 1997, 8869
            ]

            # S·∫Øp x·∫øp ƒë·ªÉ l·∫•y top 5 lo·∫°i c√≥ s·ªë l∆∞·ª£ng nhi·ªÅu nh·∫•t
            malware_data = list(zip(malware_types_full, malware_counts_full))
            malware_data_sorted = sorted(malware_data, key=lambda x: x[1], reverse=True)
            top5_types, top5_counts = zip(*malware_data_sorted[:5])

            col1, col2 = st.columns(2)
            with col1:
                fig, ax = plt.subplots(figsize=(8, 8))
                colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96c93d', '#feca57']

                wedges, texts, autotexts = ax.pie(
                    top5_counts,
                    labels=top5_types,
                    colors=colors,
                    autopct='%1.1f%%',
                    startangle=90,
                    explode=[0.05]*5
                )

                ax.set_title('Top 5 lo·∫°i m√£ ƒë·ªôc ph√°t hi·ªán nhi·ªÅu nh·∫•t', fontsize=15, fontweight='bold')

                for autotext in autotexts:
                    autotext.set_color('white')
                    autotext.set_fontweight('bold')

                st.pyplot(fig)
                plt.close()

            
            with col2:
                st.markdown("**Top 5 nh√≥m m√£ ƒë·ªôc c√≥ s·ªë ph√°t hi·ªán cao nh·∫•t:**")
                top_malware = [
                    {"name": "Worm", "detections": 8869, "risk": "C·ª±c cao"},
                    {"name": "Trojan", "detections": 5852, "risk": "Cao"},
                    {"name": "Backdoor", "detections": 5669, "risk": "Cao"},
                    {"name": "Adware", "detections": 4961, "risk": "Trung b√¨nh"},
                    {"name": "Virus", "detections": 1997, "risk": "Trung b√¨nh"}
                ]
                for i, malware in enumerate(top_malware, 1):
                    risk_color = {
                        "C·ª±c cao": "#d32f2f",
                        "Cao": "#f57c00",
                        "Trung b√¨nh": "#fbc02d"
                    }[malware["risk"]]
                    st.markdown(f"""
                    <div style="background: #f8f9fa; padding: 10px; margin: 5px 0; border-radius: 5px; border-left: 4px solid {risk_color};">
                        <strong>{i}. {malware['name']}</strong><br>
                        <small>Ph√°t hi·ªán: {malware['detections']:,} l·∫ßn | M·ª©c ƒë·ªô: <span style="color: {risk_color};">{malware['risk']}</span></small>
                    </div>
                    """, unsafe_allow_html=True)

        with chart_tabs[2]:
            st.markdown("##### Xu h∆∞·ªõng ph√°t hi·ªán m√£ ƒë·ªôc")

            fig, ax = plt.subplots(figsize=(12, 6))

            # D·ªØ li·ªáu trung b√¨nh theo tu·∫ßn
            weekly_stats = stats_df.groupby(stats_df['Ng√†y'].dt.to_period('W')).mean()

            ax.plot(range(len(weekly_stats)), weekly_stats['M√£ ƒë·ªôc ph√°t hi·ªán'],
                    marker='o', linewidth=2, markersize=4, color='#ff6b6b', label='M√£ ƒë·ªôc')
            ax.plot(range(len(weekly_stats)), weekly_stats['File l√†nh t√≠nh'],
                    marker='s', linewidth=2, markersize=4, color='#51cf66', label='File l√†nh t√≠nh')

            # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng t·ªïng th·ªÉ (polyfit b·∫≠c 1)
            z1 = np.polyfit(range(len(weekly_stats)), weekly_stats['M√£ ƒë·ªôc ph√°t hi·ªán'], 1)
            p1 = np.poly1d(z1)
            ax.plot(range(len(weekly_stats)), p1(range(len(weekly_stats))),
                    "--", alpha=0.7, color='#183153', label='Trend m√£ ƒë·ªôc')

            ax.set_xlabel('Tu·∫ßn')
            ax.set_ylabel('S·ªë l∆∞·ª£ng file trung b√¨nh')
            ax.set_title('Xu h∆∞·ªõng ph√°t hi·ªán m√£ ƒë·ªôc theo tu·∫ßn')
            ax.legend()
            ax.grid(True, alpha=0.3)

            plt.tight_layout()
            st.pyplot(fig)
            plt.close()

            # Hi·ªÉn th·ªã th√¥ng tin xu h∆∞·ªõng
            trend_slope = z1[0]
            if trend_slope > 0:
                trend_text = f"üìà T·ªïng th·ªÉ: s·ªë l∆∞·ª£ng file m√£ ƒë·ªôc/tu·∫ßn ƒëang c√≥ xu h∆∞·ªõng **tƒÉng** (+{trend_slope:.2f}/tu·∫ßn)"
                trend_color = "#ff6b6b"
            else:
                trend_text = f"üìâ T·ªïng th·ªÉ: s·ªë l∆∞·ª£ng file m√£ ƒë·ªôc/tu·∫ßn ƒëang c√≥ xu h∆∞·ªõng **gi·∫£m** (-{abs(trend_slope):.2f}/tu·∫ßn)"
                trend_color = "#51cf66"

            st.markdown(f"""
            <div style="background: {trend_color}; color: white; padding: 15px; border-radius: 5px; text-align: center; margin: 10px 0;">
                <h4>{trend_text}</h4>
            </div>
            """, unsafe_allow_html=True)


        with chart_tabs[3]:


            # D·ªØ li·ªáu theo 8 v√πng ƒë·ªãa l√Ω ch√≠nh c·ªßa Vi·ªát Nam (gi·∫£ l·∫≠p, ƒëi·ªÅn l·∫°i s·ªë li·ªáu th·ª±c t·∫ø n·∫øu c√≥)
            region_data = [
                {"region": "ƒê√¥ng B·∫Øc", "threats": 1350, "population": "15M", "density": 90.0},
                {"region": "T√¢y B·∫Øc", "threats": 620, "population": "5.7M", "density": 108.8},
                {"region": "ƒê·ªìng b·∫±ng s√¥ng H·ªìng", "threats": 2680, "population": "22M", "density": 121.8},
                {"region": "B·∫Øc Trung B·ªô", "threats": 1220, "population": "10.5M", "density": 116.2},
                {"region": "Nam Trung B·ªô", "threats": 980, "population": "9.1M", "density": 107.7},
                {"region": "T√¢y Nguy√™n", "threats": 870, "population": "6.2M", "density": 140.3},
                {"region": "ƒê√¥ng Nam B·ªô", "threats": 3350, "population": "18.2M", "density": 184.1},
                {"region": "ƒê·ªìng b·∫±ng s√¥ng C·ª≠u Long", "threats": 2110, "population": "17.5M", "density": 120.6}
            ]
            region_df = pd.DataFrame(region_data)

            # ƒê·∫∑t font ch·ªØ m·∫∑c ƒë·ªãnh cho matplotlib (n√™n d√πng font "DejaVu Sans" ho·∫∑c "Arial", ho·∫∑c font ti·∫øng Vi·ªát nh∆∞ "Roboto", "Tahoma" n·∫øu c√≥ h·ªó tr·ª£)
            plt.rcParams['font.family'] = 'DejaVu Sans'  # ho·∫∑c 'Arial', 'Tahoma', 'Roboto', v.v.
            plt.rcParams['font.size'] = 15

            fig, ax = plt.subplots(figsize=(15, 7))

            colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96c93d', '#feca57', '#ff9ff3', '#54a0ff', '#51cf66']
            bars = ax.barh(region_df['region'], region_df['threats'], color=colors, alpha=0.88, height=0.55)

            ax.set_xlabel('S·ªë l∆∞·ª£ng m·ªëi ƒëe d·ªça', fontsize=17, labelpad=15, fontweight='bold')
            ax.set_title('M·ªëi ƒëe d·ªça theo khu v·ª±c h√†nh ch√≠nh', fontsize=23, fontweight='bold', pad=25)
            ax.tick_params(axis='y', labelsize=16)
            ax.tick_params(axis='x', labelsize=15)
            ax.grid(True, alpha=0.25, axis='x', linestyle='--', linewidth=1.2)

            for bar in bars:
                width = bar.get_width()
                ax.text(width + max(region_df['threats']) * 0.015, bar.get_y() + bar.get_height()/2,
                        f'{int(width):,}', ha='left', va='center', fontsize=15, fontweight='bold', color='#222')

            plt.tight_layout(pad=2.2)
            st.pyplot(fig)
            plt.close()


            # with col2:
            # # Th·ªëng k√™ chi ti·∫øt r√∫t g·ªçn
            #     for region in region_data:
            #         st.markdown(f"""
            #         <div style="background: #f8f9fa; padding: 12px; margin: 8px 0; border-radius: 5px;">
            #             <h5 style="margin: 0 0 -18px 0; color: #333;">{region['region']}</h5>
            #             <div style="display: flex; justify-content: space-between;">
            #                 <span>M·ªëi ƒëe d·ªça:</span>
            #                 <strong>{region['threats']:,}</strong>
            #             </div>
            #             <div style="display: flex; justify-content: space-between;">
            #                 <span>T·ª∑ l·ªá nhi·ªÖm:</span>
            #                 <strong>{region['density']:.1f}%</strong>
            #             </div>
            #         </div>
            #         """, unsafe_allow_html=True)




        # Th√™m ph·∫ßn c·∫£nh b√°o v√† khuy·∫øn ngh·ªã
        st.markdown('<div class="sub-header">üí° Khuy·∫øn ngh·ªã B·∫£o m·∫≠t</div>', unsafe_allow_html=True)
        recommendations = [
            {
                "icon": "üõ°Ô∏è",
                "title": "C·∫≠p nh·∫≠t h·ªá th·ªëng th∆∞·ªùng xuy√™n",
                "desc": "Lu√¥n c√†i ƒë·∫∑t c√°c b·∫£n v√° b·∫£o m·∫≠t m·ªõi nh·∫•t cho h·ªá ƒëi·ªÅu h√†nh v√† ph·∫ßn m·ªÅm",
                "priority": "high"
            },
            {
                "icon": "üîç",
                "title": "Qu√©t m√£ ƒë·ªôc ƒë·ªãnh k·ª≥",
                "desc": "S·ª≠ d·ª•ng c√¥ng c·ª• n√†y ƒë·ªÉ qu√©t c√°c file ƒë√°ng ng·ªù √≠t nh·∫•t 1 l·∫ßn/tu·∫ßn",
                "priority": "high"
            },
            {
                "icon": "üìß",
                "title": "C·∫©n th·∫≠n v·ªõi email l·∫°",
                "desc": "Kh√¥ng m·ªü file ƒë√≠nh k√®m ho·∫∑c click link t·ª´ email kh√¥ng r√µ ngu·ªìn g·ªëc",
                "priority": "medium"
            },
            {
                "icon": "üíæ",
                "title": "Sao l∆∞u d·ªØ li·ªáu quan tr·ªçng",
                "desc": "Th·ª±c hi·ªán backup ƒë·ªãnh k·ª≥ v√† l∆∞u tr·ªØ ·ªü n∆°i an to√†n, t√°ch bi·ªát",
                "priority": "medium"
            },
            {
                "icon": "üîê",
                "title": "S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh",
                "desc": "T·∫°o m·∫≠t kh·∫©u ph·ª©c t·∫°p v√† b·∫≠t x√°c th·ª±c 2 y·∫øu t·ªë khi c√≥ th·ªÉ",
                "priority": "low"
            },
            {
                "icon": "üåê",
                "title": "Duy·ªát web an to√†n",
                "desc": "Tr√°nh truy c·∫≠p c√°c trang web ƒë√°ng ng·ªù v√† t·∫£i ph·∫ßn m·ªÅm t·ª´ ngu·ªìn kh√¥ng tin c·∫≠y",
                "priority": "low"
            }
        ]

        # Hi·ªÉn th·ªã khuy·∫øn ngh·ªã theo m·ª©c ƒë·ªô ∆∞u ti√™n
        priority_colors = {"high": "#ff6b6b", "medium": "#ffd43b", "low": "#51cf66"}
        priority_labels = {"high": "∆Øu ti√™n cao", "medium": "∆Øu ti√™n trung b√¨nh", "low": "∆Øu ti√™n th·∫•p"}

        for priority in ["high", "medium", "low"]:
            priority_recs = [r for r in recommendations if r["priority"] == priority]
            if priority_recs:
                st.markdown(f"""
                <div style="background: {priority_colors[priority]}; color: white; padding: 10px; border-radius: 5px 5px 0 0; margin-top: 20px;">
                    <h4 style="margin: 0;">{priority_labels[priority]}</h4>
                </div>
                """, unsafe_allow_html=True)
                
                for rec in priority_recs:
                    st.markdown(f"""
                    <div style="background: #f8f9fa; padding: 15px; margin: 0 0 2px 0; border-left: 4px solid {priority_colors[priority]};">
                        <div style="display: flex; align-items: center; margin-bottom: 8px;">
                            <span style="font-size: 24px; margin-right: 10px;">{rec['icon']}</span>
                            <h5 style="margin: 0; color: #333;">{rec['title']}</h5>
                        </div>
                        <p style="margin: 0; color: #666; line-height: 1.4;">{rec['desc']}</p>
                    </div>
                    """, unsafe_allow_html=True)
# --- Tab th√¥ng tin ---
with tab4:
    st.markdown('<div class="sub-header">‚ÑπÔ∏è Th√¥ng tin v·ªÅ ·ª©ng d·ª•ng</div>', unsafe_allow_html=True)
    
    # Th√¥ng tin v·ªÅ m√¥ h√¨nh
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### ü§ñ Th√¥ng tin m√¥ h√¨nh")
        if model is not None and class_names is not None:
            st.success("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng")
            st.write(f"**S·ªë l∆∞·ª£ng l·ªõp:** {len(class_names)}")
            st.write(f"**Ki·∫øn tr√∫c:** Inception v3")
            st.write(f"**Thi·∫øt b·ªã:** {device}")
            
            # Hi·ªÉn th·ªã danh s√°ch l·ªõp
            with st.expander("Xem danh s√°ch l·ªõp"):
                for i, class_name in enumerate(class_names):
                    st.write(f"{i+1}. {class_name}")
        else:
            st.warning("‚ö†Ô∏è Ch∆∞a t·∫£i m√¥ h√¨nh")
    
    with col2:
        st.markdown("### ‚öôÔ∏è C·∫•u h√¨nh hi·ªán t·∫°i")
        st.write(f"**K√≠ch th∆∞·ªõc ·∫£nh model:** {IMAGE_SIZE}")
        st.write(f"**K√≠ch th∆∞·ªõc ·∫£nh hi·ªÉn th·ªã:** {IMAGE_SIZE2}")
        st.write(f"**Ng∆∞·ª°ng ph√°t hi·ªán:** {threshold:.2%}")
        st.write(f"**K√≠ch th∆∞·ªõc file t·ªëi ƒëa:** {max_file_size} MB")
        st.write(f"**S·ªë k·∫øt qu·∫£ top hi·ªÉn th·ªã:** {top_k_results}")
        
        # Hi·ªÉn th·ªã danh s√°ch l·ªõp l√†nh t√≠nh
        with st.expander("Xem l·ªõp l√†nh t√≠nh"):
            for benign_class in benign_classes:
                st.write(f"‚Ä¢ {benign_class}")

    # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    st.markdown("### üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    
    with st.expander("üîç C√°ch ph√¢n t√≠ch file ƒë∆°n l·∫ª"):
        st.markdown("""
        1. **T·∫£i m√¥ h√¨nh:** Ch·ªçn ngu·ªìn m√¥ h√¨nh trong sidebar (ƒë∆∞·ªùng d·∫´n c·ª•c b·ªô ho·∫∑c upload t·ª´ m√°y t√≠nh)
        2. **Ch·ªçn file:** Trong tab "Qu√©t ch∆∞∆°ng tr√¨nh ƒë∆°n l·∫ª", click "Browse files" v√† ch·ªçn file .exe ho·∫∑c .dll
        3. **Xem k·∫øt qu·∫£:** H·ªá th·ªëng s·∫Ω hi·ªÉn th·ªã:
           - K·∫øt lu·∫≠n v·ªÅ file (m√£ ƒë·ªôc/l√†nh t√≠nh/kh√¥ng ch·∫Øc ch·∫Øn)
           - Top d·ª± ƒëo√°n v·ªõi x√°c su·∫•t
           - Ph√¢n t√≠ch chi ti·∫øt (hash, entropy, PE header, imports, strings...)
        4. **ƒê√°nh gi√°:** D·ª±a v√†o x√°c su·∫•t v√† c√°c th√¥ng tin chi ti·∫øt ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh cu·ªëi c√πng
        """)
    
    with st.expander("üìÅ C√°ch qu√©t th∆∞ m·ª•c"):
        st.markdown("""
        1. **T·∫£i m√¥ h√¨nh:** ƒê·∫£m b·∫£o ƒë√£ t·∫£i m√¥ h√¨nh th√†nh c√¥ng
        2. **Ch·ªçn ngu·ªìn:** 
           - **File ZIP:** Upload file ZIP ch·ª©a c√°c file c·∫ßn qu√©t
           - **ƒê∆∞·ªùng d·∫´n:** Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c tr√™n m√°y t√≠nh
        3. **C·∫•u h√¨nh:** M·ªü "C·∫•u h√¨nh qu√©t n√¢ng cao" ƒë·ªÉ ƒëi·ªÅu ch·ªânh:
           - K√≠ch th∆∞·ªõc file t·ªëi thi·ªÉu/t·ªëi ƒëa
           - ƒê·ªô s√¢u ph√¢n t√≠ch (Nhanh/C√¢n b·∫±ng/S√¢u)
        4. **B·∫Øt ƒë·∫ßu qu√©t:** Click "B·∫Øt ƒë·∫ßu qu√©t" v√† ch·ªù k·∫øt qu·∫£
        5. **Xem k·∫øt qu·∫£:** H·ªá th·ªëng hi·ªÉn th·ªã t·ªïng quan v√† chi ti·∫øt theo t·ª´ng lo·∫°i
        """)
    
    with st.expander("‚öôÔ∏è C·∫•u h√¨nh n√¢ng cao"):
        st.markdown("""
        **Trong Sidebar:**
        - **Ngu·ªìn m√¥ h√¨nh:** Ch·ªçn c√°ch t·∫£i m√¥ h√¨nh (ƒë∆∞·ªùng d·∫´n ho·∫∑c upload)
        - **K√≠ch th∆∞·ªõc ·∫£nh:** ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ·∫£nh cho m√¥ h√¨nh v√† hi·ªÉn th·ªã
        - **Ng∆∞·ª°ng ph√°t hi·ªán:** X√°c su·∫•t t·ªëi thi·ªÉu ƒë·ªÉ x√°c ƒë·ªãnh m√£ ƒë·ªôc (0.0-1.0)
        - **K√≠ch th∆∞·ªõc file t·ªëi ƒëa:** Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file ƒë∆∞·ª£c ph√¢n t√≠ch
        - **L·ªõp l√†nh t√≠nh:** Danh s√°ch t√™n l·ªõp ƒë∆∞·ª£c coi l√† l√†nh t√≠nh
        
        **ƒê·ªô s√¢u ph√¢n t√≠ch:**
        - **Nhanh:** Ph√¢n t√≠ch c∆° b·∫£n, t·ªëc ƒë·ªô cao
        - **C√¢n b·∫±ng:** Ph√¢n t√≠ch v·ª´a ph·∫£i (m·∫∑c ƒë·ªãnh)
        - **S√¢u:** Ph√¢n t√≠ch chi ti·∫øt, bao g·ªìm entropy v√† th·ªëng k√™ n√¢ng cao
        """)

    # Th√¥ng tin k·ªπ thu·∫≠t
    st.markdown("### üî¨ Th√¥ng tin k·ªπ thu·∫≠t")
    
    with st.expander("Xem chi ti·∫øt k·ªπ thu·∫≠t"):
        st.markdown("""
        **Ki·∫øn tr√∫c m√¥ h√¨nh:** Inception v3
        - M·∫°ng neural t√≠ch ch·∫≠p s√¢u ƒë∆∞·ª£c thi·∫øt k·∫ø b·ªüi Google
        - T·ªëi ∆∞u h√≥a cho ph√¢n lo·∫°i h√¨nh ·∫£nh v·ªõi ƒë·ªô ch√≠nh x√°c cao
        - S·ª≠ d·ª•ng factorized convolutions v√† auxiliary classifiers
        
        **Quy tr√¨nh x·ª≠ l√Ω:**
        1. Chuy·ªÉn ƒë·ªïi file binary th√†nh ·∫£nh grayscale
        2. Chuy·ªÉn ƒë·ªïi grayscale sang RGB (3 k√™nh)
        3. Resize ·∫£nh v·ªÅ k√≠ch th∆∞·ªõc m√¥ h√¨nh y√™u c·∫ßu
        4. Chu·∫©n h√≥a pixel values theo ImageNet standards
        5. D·ª± ƒëo√°n qua m√¥ h√¨nh v√† t√≠nh softmax probabilities
        
        **Ph√¢n t√≠ch tƒ©nh:**
        - **PE Header:** Th√¥ng tin v·ªÅ file PE (Portable Executable)
        - **Sections:** Ph√¢n t√≠ch c√°c section v√† entropy c·ªßa ch√∫ng
        - **Imports:** Danh s√°ch c√°c h√†m ƒë∆∞·ª£c import t·ª´ DLL
        - **Strings:** Tr√≠ch xu·∫•t v√† ph√¢n t√≠ch chu·ªói ASCII
        - **Entropy:** ƒêo ƒë·ªô ng·∫´u nhi√™n c·ªßa d·ªØ li·ªáu (0-8)
        
        **Metrics:**
        - **Entropy < 6.0:** File th√¥ng th∆∞·ªùng
        - **Entropy 6.0-7.0:** C√≥ th·ªÉ n√©n/m√£ h√≥a m·ªôt ph·∫ßn  
        - **Entropy > 7.0:** C√≥ th·ªÉ ƒë∆∞·ª£c n√©n/m√£ h√≥a/ƒë√≥ng g√≥i
        """)

     # Hi·ªÉn th·ªã b·∫£n ƒë·ªì Vi·ªát Nam v·ªõi th√¥ng tin v·ªÅ m·ªëi ƒëe d·ªça
        st.markdown('<div class="map-header">üó∫Ô∏è Gi√°m s√°t an ninh m·∫°ng qu·ªëc gia: B·∫£n ƒë·ªì Vi·ªát Nam</div>', unsafe_allow_html=True)

        # T·∫°o HTML cho b·∫£n ƒë·ªì
        map_html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Vietnam Cybersecurity Threat Map</title>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
            <style>
                body { margin: 0; padding: 0; }
                #map { height: 500px; width: 100%; }
                .threat-info {
                    background: rgba(255, 255, 255, 0.9);
                    padding: 10px;
                    border-radius: 5px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
                }
                .threat-level-high { color: #d32f2f; font-weight: bold; }
                .threat-level-medium { color: #f57c00; font-weight: bold; }
                .threat-level-low { color: #388e3c; font-weight: bold; }
            </style>
        </head>
        <body>
            <div id="map"></div>
            <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
            <script>
                // Kh·ªüi t·∫°o b·∫£n ƒë·ªì t·∫≠p trung v√†o Vi·ªát Nam
                var map = L.map('map').setView([16.0583, 108.2772], 6);
                // Th√™m tile layer
                L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {attribution: '¬© OpenStreetMap, ¬© CartoDB'}).addTo(map);
                // D·ªØ li·ªáu m·ªëi ƒëe d·ªça gi·∫£ l·∫≠p 63 t·ªânh/th√†nh Vi·ªát Nam 2024
                var threatData = [
                    // Nh√≥m High (t·ª´ 700+)
                    {city: "TP. H·ªì Ch√≠ Minh", lat: 10.7769, lng: 106.7009, threats: 2100, level: "high", malware: 750, phishing: 520, ddos: 315, other: 515},
                    {city: "H√† N·ªôi", lat: 21.0285, lng: 105.8542, threats: 1480, level: "high", malware: 525, phishing: 365, ddos: 212, other: 378},
                    {city: "B√¨nh D∆∞∆°ng", lat: 10.9804, lng: 106.6519, threats: 855, level: "high", malware: 312, phishing: 201, ddos: 121, other: 221},
                    {city: "ƒê·ªìng Nai", lat: 10.9452, lng: 106.8246, threats: 802, level: "high", malware: 285, phishing: 189, ddos: 116, other: 212},

                    // Nh√≥m Medium (300‚Äì700)
                    {city: "H·∫£i Ph√≤ng", lat: 20.8449, lng: 106.6881, threats: 626, level: "medium", malware: 213, phishing: 168, ddos: 104, other: 141},
                    {city: "C·∫ßn Th∆°", lat: 10.0452, lng: 105.7469, threats: 563, level: "medium", malware: 186, phishing: 153, ddos: 80, other: 144},
                    {city: "ƒê√† N·∫µng", lat: 16.0544, lng: 108.2022, threats: 488, level: "medium", malware: 159, phishing: 126, ddos: 74, other: 129},
                    {city: "Thanh H√≥a", lat: 19.8072, lng: 105.7768, threats: 473, level: "medium", malware: 154, phishing: 121, ddos: 77, other: 121},
                    {city: "Ngh·ªá An", lat: 18.6796, lng: 105.6813, threats: 452, level: "medium", malware: 147, phishing: 115, ddos: 70, other: 120},
                    {city: "Qu·∫£ng Ninh", lat: 21.0064, lng: 107.2925, threats: 441, level: "medium", malware: 141, phishing: 112, ddos: 66, other: 122},
                    {city: "Th·ª´a Thi√™n Hu·∫ø", lat: 16.4637, lng: 107.5909, threats: 407, level: "medium", malware: 135, phishing: 98, ddos: 62, other: 112},
                    {city: "H·∫£i D∆∞∆°ng", lat: 20.9401, lng: 106.3336, threats: 396, level: "medium", malware: 123, phishing: 101, ddos: 62, other: 110},
                    {city: "B·∫Øc Ninh", lat: 21.1861, lng: 106.0763, threats: 384, level: "medium", malware: 118, phishing: 95, ddos: 66, other: 105},
                    {city: "Th√°i B√¨nh", lat: 20.4509, lng: 106.3406, threats: 376, level: "medium", malware: 112, phishing: 92, ddos: 65, other: 107},
                    {city: "Vƒ©nh Ph√∫c", lat: 21.3081, lng: 105.6046, threats: 372, level: "medium", malware: 109, phishing: 90, ddos: 62, other: 111},
                    {city: "B·∫Øc Giang", lat: 21.2731, lng: 106.1946, threats: 361, level: "medium", malware: 106, phishing: 84, ddos: 66, other: 105},
                    {city: "Nam ƒê·ªãnh", lat: 20.4388, lng: 106.1621, threats: 358, level: "medium", malware: 103, phishing: 88, ddos: 61, other: 106},
                    {city: "Ph√∫ Th·ªç", lat: 21.3457, lng: 105.2120, threats: 347, level: "medium", malware: 100, phishing: 85, ddos: 55, other: 107},
                    {city: "Qu·∫£ng Nam", lat: 15.5394, lng: 108.0191, threats: 341, level: "medium", malware: 98, phishing: 83, ddos: 54, other: 106},

                    // Nh√≥m Low (d∆∞·ªõi 300)
                    {city: "B√¨nh ƒê·ªãnh", lat: 13.7820, lng: 109.2191, threats: 298, level: "low", malware: 85, phishing: 76, ddos: 46, other: 91},
                    {city: "Qu·∫£ng Ng√£i", lat: 15.1202, lng: 108.7922, threats: 286, level: "low", malware: 84, phishing: 63, ddos: 43, other: 96},
                    {city: "L√¢m ƒê·ªìng", lat: 11.5753, lng: 108.1429, threats: 275, level: "low", malware: 78, phishing: 59, ddos: 40, other: 98},
                    {city: "Ki√™n Giang", lat: 10.0086, lng: 105.0807, threats: 265, level: "low", malware: 75, phishing: 58, ddos: 36, other: 96},
                    {city: "Long An", lat: 10.5435, lng: 106.4106, threats: 257, level: "low", malware: 72, phishing: 55, ddos: 38, other: 92},
                    {city: "B·∫øn Tre", lat: 10.2415, lng: 106.3754, threats: 243, level: "low", malware: 69, phishing: 52, ddos: 33, other: 89},
                    {city: "An Giang", lat: 10.5216, lng: 105.1259, threats: 239, level: "low", malware: 67, phishing: 54, ddos: 31, other: 87},
                    {city: "ƒê·∫Øk L·∫Øk", lat: 12.7100, lng: 108.2378, threats: 233, level: "low", malware: 65, phishing: 47, ddos: 32, other: 89},
                    {city: "Ti·ªÅn Giang", lat: 10.4493, lng: 106.3421, threats: 231, level: "low", malware: 66, phishing: 46, ddos: 31, other: 88},
                    {city: "B√† R·ªãa - V≈©ng T√†u", lat: 10.5418, lng: 107.2428, threats: 228, level: "low", malware: 64, phishing: 49, ddos: 28, other: 87},
                    {city: "Qu·∫£ng B√¨nh", lat: 17.4689, lng: 106.6228, threats: 224, level: "low", malware: 62, phishing: 44, ddos: 31, other: 87},
                    {city: "T√¢y Ninh", lat: 11.3352, lng: 106.1099, threats: 220, level: "low", malware: 61, phishing: 43, ddos: 29, other: 87},
                    {city: "Th√°i Nguy√™n", lat: 21.5672, lng: 105.8252, threats: 217, level: "low", malware: 60, phishing: 42, ddos: 28, other: 87},
                    {city: "Vƒ©nh Long", lat: 10.2536, lng: 105.9722, threats: 211, level: "low", malware: 59, phishing: 41, ddos: 25, other: 86},
                    {city: "Qu·∫£ng Tr·ªã", lat: 16.8187, lng: 107.0917, threats: 207, level: "low", malware: 57, phishing: 40, ddos: 26, other: 84},
                    {city: "S√≥c TrƒÉng", lat: 9.6026, lng: 105.9731, threats: 203, level: "low", malware: 56, phishing: 39, ddos: 25, other: 83},
                    {city: "Gia Lai", lat: 13.8079, lng: 108.1095, threats: 200, level: "low", malware: 54, phishing: 37, ddos: 24, other: 85},
                    {city: "B·∫°c Li√™u", lat: 9.2941, lng: 105.7278, threats: 199, level: "low", malware: 54, phishing: 38, ddos: 23, other: 84},
                    {city: "H√† Tƒ©nh", lat: 18.3559, lng: 105.8875, threats: 197, level: "low", malware: 52, phishing: 38, ddos: 24, other: 83},
                    {city: "Ninh B√¨nh", lat: 20.2506, lng: 105.9745, threats: 194, level: "low", malware: 52, phishing: 36, ddos: 22, other: 84},
                    {city: "H∆∞ng Y√™n", lat: 20.6463, lng: 106.0511, threats: 192, level: "low", malware: 51, phishing: 35, ddos: 22, other: 84},
                    {city: "ƒê·∫Øk N√¥ng", lat: 12.2644, lng: 107.6098, threats: 188, level: "low", malware: 49, phishing: 34, ddos: 21, other: 84},
                    {city: "Tuy√™n Quang", lat: 21.8230, lng: 105.2148, threats: 185, level: "low", malware: 49, phishing: 33, ddos: 21, other: 82},
                    {city: "Ph√∫ Y√™n", lat: 13.0882, lng: 109.0929, threats: 181, level: "low", malware: 48, phishing: 31, ddos: 22, other: 80},
                    {city: "B√¨nh Ph∆∞·ªõc", lat: 11.7512, lng: 106.7235, threats: 178, level: "low", malware: 47, phishing: 31, ddos: 20, other: 80},
                    {city: "Vƒ©nh Long", lat: 10.2536, lng: 105.9722, threats: 175, level: "low", malware: 46, phishing: 30, ddos: 20, other: 79},
                    {city: "H√† Nam", lat: 20.5833, lng: 105.9160, threats: 174, level: "low", malware: 45, phishing: 31, ddos: 19, other: 79},
                    {city: "Y√™n B√°i", lat: 21.7051, lng: 104.8800, threats: 173, level: "low", malware: 44, phishing: 31, ddos: 18, other: 80},
                    {city: "C√† Mau", lat: 9.1768, lng: 105.1500, threats: 172, level: "low", malware: 43, phishing: 30, ddos: 18, other: 81},
                    {city: "L√†o Cai", lat: 22.4804, lng: 103.9756, threats: 170, level: "low", malware: 42, phishing: 30, ddos: 18, other: 80},
                    {city: "Kon Tum", lat: 14.3549, lng: 108.0076, threats: 168, level: "low", malware: 41, phishing: 29, ddos: 17, other: 81},
                    {city: "H√≤a B√¨nh", lat: 20.8171, lng: 105.3376, threats: 167, level: "low", malware: 41, phishing: 28, ddos: 17, other: 81},
                    {city: "Tr√† Vinh", lat: 9.9347, lng: 106.3452, threats: 163, level: "low", malware: 41, phishing: 27, ddos: 16, other: 79},
                    {city: "L·∫°ng S∆°n", lat: 21.8528, lng: 106.7610, threats: 159, level: "low", malware: 40, phishing: 27, ddos: 16, other: 76},
                    {city: "Qu·∫£ng Nam", lat: 15.5394, lng: 108.0191, threats: 158, level: "low", malware: 39, phishing: 27, ddos: 15, other: 77},
                    {city: "B·∫Øc K·∫°n", lat: 22.1485, lng: 105.8348, threats: 156, level: "low", malware: 39, phishing: 25, ddos: 15, other: 77},
                    {city: "Cao B·∫±ng", lat: 22.6666, lng: 106.2579, threats: 154, level: "low", malware: 38, phishing: 25, ddos: 14, other: 77},
                    {city: "B√¨nh Thu·∫≠n", lat: 11.0904, lng: 108.0721, threats: 153, level: "low", malware: 37, phishing: 26, ddos: 13, other: 77},
                    {city: "ƒêi·ªán Bi√™n", lat: 21.3860, lng: 103.0230, threats: 151, level: "low", malware: 36, phishing: 24, ddos: 14, other: 77},
                    {city: "Ninh Thu·∫≠n", lat: 11.6739, lng: 109.0147, threats: 149, level: "low", malware: 35, phishing: 24, ddos: 13, other: 77},
                    {city: "H√† Giang", lat: 22.8233, lng: 104.9836, threats: 147, level: "low", malware: 34, phishing: 23, ddos: 13, other: 77},
                    {city: "Qu·∫£ng Ng√£i", lat: 15.1202, lng: 108.7922, threats: 146, level: "low", malware: 33, phishing: 23, ddos: 12, other: 78},
                    {city: "S∆°n La", lat: 21.3256, lng: 103.9188, threats: 144, level: "low", malware: 33, phishing: 23, ddos: 12, other: 76},
                    {city: "B·∫Øc Ninh", lat: 21.1861, lng: 106.0763, threats: 143, level: "low", malware: 32, phishing: 22, ddos: 12, other: 77},
                    {city: "Ph√∫ Th·ªç", lat: 21.3457, lng: 105.2120, threats: 139, level: "low", malware: 31, phishing: 21, ddos: 11, other: 76},
                    {city: "Kh√°nh H√≤a", lat: 12.2388, lng: 109.1967, threats: 126, level: "low", malware: 27, phishing: 18, ddos: 10, other: 71},
                    {city: "H·∫≠u Giang", lat: 9.7845, lng: 105.4701, threats: 123, level: "low", malware: 26, phishing: 17, ddos: 9, other: 71},
                    // ... (b·∫°n c√≥ th·ªÉ th√™m ti·∫øp c√°c huy·ªán/th·ªã x√£ n·∫øu c·∫ßn)
                ];

                // H√†m x√°c ƒë·ªãnh m√†u s·∫Øc d·ª±a tr√™n m·ª©c ƒë·ªô ƒëe d·ªça
                function getThreatColor(level) {
                    switch(level) {
                        case 'high': return '#d32f2f';
                        case 'medium': return '#f57c00';
                        case 'low': return '#388e3c';
                        default: return '#666666';
                    }
                }
                
                // H√†m x√°c ƒë·ªãnh k√≠ch th∆∞·ªõc marker d·ª±a tr√™n s·ªë l∆∞·ª£ng ƒëe d·ªça
                function getMarkerSize(threats) {
                    if (threats > 1000) return 25;
                    if (threats > 500) return 15;
                    if (threats > 200) return 10;
                    return 10;
                }
                
                // Th√™m markers cho t·ª´ng th√†nh ph·ªë
                threatData.forEach(function(data) {
                    var color = getThreatColor(data.level);
                    var size = getMarkerSize(data.threats);
                    
                    // T·∫°o custom icon
                    var threatIcon = L.divIcon({
                        className: 'threat-marker',
                        html: '<div style="background-color: ' + color + '; width: ' + size + 'px; height: ' + size + 'px; border-radius: 50%; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);"></div>',
                        iconSize: [size, size],
                        iconAnchor: [size/2, size/2]
                    });
                    
                    // T·∫°o popup content
                    var popupContent = `
                        <div class="threat-info">
                            <h3>${data.city}</h3>
                            <p><strong>T·ªïng m·ªëi ƒëe d·ªça:</strong> <span class="threat-level-${data.level}">${data.threats}</span></p>
                            <hr>
                            <p><strong>Ph√¢n lo·∫°i:</strong></p>
                            <ul>
                                <li>ü¶† Malware: ${data.malware}</li>
                                <li>üé£ Phishing: ${data.phishing}</li>
                                <li>‚ö° DDoS: ${data.ddos}</li>
                                <li>üîß Kh√°c: ${data.other}</li>
                            </ul>
                            <p><strong>M·ª©c ƒë·ªô:</strong> <span class="threat-level-${data.level}">${data.level.toUpperCase()}</span></p>
                        </div>
                    `;
                    
                    // Th√™m marker v√†o b·∫£n ƒë·ªì
                    L.marker([data.lat, data.lng], {icon: threatIcon})
                        .bindPopup(popupContent)
                        .addTo(map);
                });
                
                // Th√™m legend
                var legend = L.control({position: 'bottomright'});
                legend.onAdd = function (map) {
                    var div = L.DomUtil.create('div', 'info legend');
                    div.innerHTML = `
                        <div style="background: rgba(255,255,255,0.9); padding: 10px; border-radius: 5px; box-shadow: 0 1px 10px rgba(0,0,0,0.2);">
                            <h4>M·ª©c ƒë·ªô ƒëe d·ªça</h4>
                            <div><span style="color: #d32f2f;">‚óè</span> Cao (>1000)</div>
                            <div><span style="color: #f57c00;">‚óè</span> Trung b√¨nh (200-1000)</div>
                            <div><span style="color: #388e3c;">‚óè</span> Th·∫•p (<200)</div>
                            <hr>
                            <small>D·ªØ li·ªáu c·∫≠p nh·∫≠t: ${new Date().toLocaleDateString('vi-VN')}</small>
                        </div>
                    `;
                    return div;
                };
                legend.addTo(map);
                
                // Th√™m th√¥ng tin t·ªïng quan
                var info = L.control({position: 'topleft'});
                info.onAdd = function (map) {
                    var div = L.DomUtil.create('div', 'info');
                    var totalThreats = threatData.reduce((sum, data) => sum + data.threats, 0);
                    div.innerHTML = `
                        <div style="background: rgba(255,255,255,0.9); padding: 15px; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.2);">
                            <h3>üáªüá≥ T√¨nh h√¨nh An ninh m·∫°ng Vi·ªát Nam</h3>
                            <p><strong>T·ªïng m·ªëi ƒëe d·ªça:</strong> <span style="color: #d32f2f; font-weight: bold;">${totalThreats}</span></p>
                            <p><strong>Khu v·ª±c nguy hi·ªÉm nh·∫•t:</strong> TP. H·ªì Ch√≠ Minh</p>
                            <p><strong>Lo·∫°i ƒëe d·ªça ph·ªï bi·∫øn:</strong> Malware</p>
                            <hr>
                            <small>‚ö†Ô∏èD·ªØ li·ªáu s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch minh h·ªça</small>
                        </div>
                    `;
                    return div;
                };
                info.addTo(map);

                
                // Th√™m hi·ªáu ·ª©ng pulse cho c√°c marker c√≥ m·ª©c ƒëe d·ªça cao
                threatData.forEach(function(data) {
                    if (data.level === 'high') {
                        var pulseIcon = L.divIcon({
                            className: 'pulse-marker',
                            html: '<div class="pulse-dot"></div>',
                            iconSize: [20, 20],
                            iconAnchor: [10, 10]
                        });
                        
                        L.marker([data.lat, data.lng], {icon: pulseIcon}).addTo(map);
                    }
                });
                
                // CSS cho hi·ªáu ·ª©ng pulse
                var style = document.createElement('style');
                style.innerHTML = `
                    .pulse-dot {
                        width: 20px;
                        height: 20px;
                        background-color: #d32f2f;
                        border-radius: 50%;
                        animation: pulse 2s infinite;
                        opacity: 0.8;
                    }
                    
                    @keyframes pulse {
                        0% {
                            transform: scale(0.8);
                            opacity: 1;
                        }
                        50% {
                            transform: scale(1.2);
                            opacity: 0.5;
                        }
                        100% {
                            transform: scale(0.8);
                            opacity: 1;
                        }
                    }
                `;
                document.head.appendChild(style);
                
            </script>
        </body>
        </html>
        """

        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì
        st.components.v1.html(map_html, height=500)

        # Th√™m th√¥ng tin c·∫£nh b√°o b·∫£o m·∫≠t
        st.markdown('<div class="sub-header">üö® C·∫£nh b√°o B·∫£o m·∫≠t</div>', unsafe_allow_html=True)

        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("""
            <div style="background: linear-gradient(135deg, #ff6b6b, #ee5a52); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                <h4>‚ö†Ô∏è M·ª©c ƒë·ªô ƒëe d·ªça</h4>
                <h2>CAO</h2>
                <p>Ph√°t hi·ªán nhi·ªÅu m√£ ƒë·ªôc m·ªõi</p>
                <small>C·∫≠p nh·∫≠t: H√¥m nay</small>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
            <div style="background: linear-gradient(135deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                <h4>üõ°Ô∏è T·ª∑ l·ªá ph√°t hi·ªán</h4>
                <h2>94.7%</h2>
                <p>ƒê·ªô ch√≠nh x√°c c·ªßa h·ªá th·ªëng</p>
                <small>D·ª±a tr√™n 10,000+ m·∫´u</small>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            st.markdown("""
            <div style="background: linear-gradient(135deg, #45b7d1, #96c93d); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                <h4>üìä Files ƒë√£ qu√©t</h4>
                <h2>2,847</h2>
                <p>Trong th√°ng n√†y</p>
                <small>TƒÉng 23% so v·ªõi th√°ng tr∆∞·ªõc</small>
            </div>
            """, unsafe_allow_html=True)

        # Th√™m RSS feed gi·∫£ l·∫≠p v·ªÅ tin t·ª©c b·∫£o m·∫≠t
        st.markdown('<div class="sub-header">üì∞ Tin t·ª©c B·∫£o m·∫≠t m·ªõi nh·∫•t</div>', unsafe_allow_html=True)

        news_data = [
            {
                "title": "Ph√°t hi·ªán bi·∫øn th·ªÉ m·ªõi c·ªßa ransomware LockBit t·∫°i Vi·ªát Nam",
                "summary": "C√°c chuy√™n gia b·∫£o m·∫≠t c·∫£nh b√°o v·ªÅ s·ª± xu·∫•t hi·ªán c·ªßa bi·∫øn th·ªÉ m·ªõi c·ªßa ransomware LockBit ƒëang nh·∫Øm m·ª•c ti√™u v√†o c√°c doanh nghi·ªáp Vi·ªát Nam.",
                "time": "2 gi·ªù tr∆∞·ªõc",
                "severity": "high"
            },
            {
                "title": "C·∫≠p nh·∫≠t b·∫£n v√° b·∫£o m·∫≠t kh·∫©n c·∫•p cho Windows",
                "summary": "Microsoft ph√°t h√†nh b·∫£n v√° kh·∫©n c·∫•p ƒë·ªÉ s·ª≠a l·ªói zero-day ƒëang ƒë∆∞·ª£c khai th√°c t√≠ch c·ª±c b·ªüi c√°c nh√≥m APT.",
                "time": "5 gi·ªù tr∆∞·ªõc", 
                "severity": "high"
            },
            {
                "title": "Chi·∫øn d·ªãch phishing m·∫°o danh ng√¢n h√†ng gia tƒÉng",
                "summary": "S·ªë l∆∞·ª£ng email phishing m·∫°o danh c√°c ng√¢n h√†ng l·ªõn t·∫°i Vi·ªát Nam tƒÉng 45% trong tu·∫ßn qua.",
                "time": "1 ng√†y tr∆∞·ªõc",
                "severity": "medium"
            },
            {
                "title": "H∆∞·ªõng d·∫´n b·∫£o v·ªá h·ªá th·ªëng kh·ªèi malware m·ªõi",
                "summary": "C√°c bi·ªán ph√°p ph√≤ng ng·ª´a v√† ph√°t hi·ªán s·ªõm c√°c lo·∫°i malware m·ªõi xu·∫•t hi·ªán g·∫ßn ƒë√¢y.",
                "time": "2 ng√†y tr∆∞·ªõc",
                "severity": "low"
            }
        ]

        for news in news_data:
            severity_color = {"high": "#ff6b6b", "medium": "#ffd43b", "low": "#51cf66"}[news["severity"]]
            severity_text = {"high": "üî¥ Nghi√™m tr·ªçng", "medium": "üü° Trung b√¨nh", "low": "üü¢ Th√¥ng tin"}[news["severity"]]
            
            st.markdown(f"""
            <div style="border-left: 4px solid {severity_color}; background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 0 5px 5px 0;">
                <div style="display: flex; justify-content: between; align-items: center; margin-bottom: 8px;">
                    <h4 style="margin: 0; color: #333;">{news['title']}</h4>
                    <span style="color: {severity_color}; font-size: 0.9em; font-weight: bold;">{severity_text}</span>
                </div>
                <p style="margin: 8px 0; color: #666; line-height: 1.5;">{news['summary']}</p>
                <small style="color: #999;">‚è∞ {news['time']}</small>
            </div>
            """, unsafe_allow_html=True)

        # Th√™m bi·ªÉu ƒë·ªì th·ªëng k√™ th·ªùi gian th·ª±c
        st.markdown('<div class="sub-header">üìà Th·ªëng k√™ Th·ªùi gian th·ª±c</div>', unsafe_allow_html=True)

        # T·∫°o d√£y ng√†y
        dates = pd.date_range(start='2024-07-01', end='2025-06-30', freq='D')

        # Thi·∫øt l·∫≠p seed ƒë·ªÉ t√°i l·∫≠p k·∫øt qu·∫£
        np.random.seed(42)

        # T·∫°o h·ªá s·ªë dao ƒë·ªông cho t·ª´ng th√°ng (gi·∫£ l·∫≠p xu h∆∞·ªõng th·ª±c t·∫ø: cu·ªëi nƒÉm tƒÉng, ƒë·∫ßu nƒÉm gi·∫£m)
        monthly_malware_base = {
            7:  14,  8: 13,  9: 16, 10: 19, 11: 22, 12: 28,  # T·ª´ th√°ng 7 ƒë·∫øn th√°ng 12/2024
            1:  32,  2: 29,  3: 22,  4: 18,  5: 16,  6: 15   # T·ª´ th√°ng 1 ƒë·∫øn th√°ng 6/2025
        }
        monthly_clean_base = {
            7:  55,  8: 56,  9: 58, 10: 62, 11: 66, 12: 70,
            1:  75,  2: 70,  3: 65,  4: 60,  5: 58,  6: 56
        }

        dates = pd.date_range(start='2024-07-01', end='2025-06-30', freq='D')
        np.random.seed(42)

        malware_detections = []
        clean_files = []
        base_mal = 10
        base_clean = 50
        trend_increase = 0.08  # m·ª©c tƒÉng nh·∫π theo ng√†y

        for i, d in enumerate(dates):
            # Dao ƒë·ªông m·∫°nh quanh gi√° tr·ªã trung b√¨nh nh∆∞ng v·∫´n tƒÉng d·∫ßn theo th·ªùi gian
            daily_mal = base_mal + (i * trend_increase) + np.random.normal(0, 5)
            daily_clean = base_clean + (i * trend_increase * 2) + np.random.normal(0, 12)
            malware_detections.append(max(0, int(daily_mal)))
            clean_files.append(max(0, int(daily_clean)))

        stats_df = pd.DataFrame({
            'Ng√†y': dates,
            'M√£ ƒë·ªôc ph√°t hi·ªán': malware_detections,
            'File l√†nh t√≠nh': clean_files,
            'T·ªïng file qu√©t': np.array(malware_detections) + np.array(clean_files)
        })

        # Optional: Xem th·ª≠ th·ªëng k√™ theo th√°ng
        #print(stats_df.groupby(stats_df['Ng√†y'].dt.month)[['M√£ ƒë·ªôc ph√°t hi·ªán', 'File l√†nh t√≠nh']].mean())

        # T·∫°o tabs cho c√°c bi·ªÉu ƒë·ªì kh√°c nhau
        chart_tabs = st.tabs(["üìä T·ªïng quan", "ü¶† M√£ ƒë·ªôc", "üìà Xu h∆∞·ªõng", "üåç Ph√¢n b·ªë ƒë·ªãa l√Ω"])

        with chart_tabs[0]:
            
            # Bi·ªÉu ƒë·ªì c·ªôt
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # L·∫•y d·ªØ li·ªáu theo th√°ng - S·ª¨A L·ªñI ·ªû ƒê√ÇY
            monthly_stats = stats_df.groupby(stats_df['Ng√†y'].dt.to_period('M')).agg({
                'M√£ ƒë·ªôc ph√°t hi·ªán': 'sum',
                'File l√†nh t√≠nh': 'sum',
                'T·ªïng file qu√©t': 'sum'
            })
            
            x = range(len(monthly_stats))
            width = 0.35
            
            ax.bar([i - width/2 for i in x], monthly_stats['M√£ ƒë·ªôc ph√°t hi·ªán'], width, 
                label='M√£ ƒë·ªôc ph√°t hi·ªán', color='#ff6b6b', alpha=0.8)
            ax.bar([i + width/2 for i in x], monthly_stats['File l√†nh t√≠nh'], width,
                label='File l√†nh t√≠nh', color='#51cf66', alpha=0.8)
            
            ax.set_xlabel('Th√°ng')
            ax.set_ylabel('S·ªë l∆∞·ª£ng file')
            ax.set_title('Th·ªëng k√™ ph√°t hi·ªán m√£ ƒë·ªôc theo th√°ng')
            ax.set_xticks(x)
            ax.set_xticklabels([str(period) for period in monthly_stats.index])
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            plt.xticks(rotation=45)
            plt.tight_layout()
            st.pyplot(fig)
            plt.close()

        with chart_tabs[1]:
            # L·∫•y d·ªØ li·ªáu v√† s·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng gi·∫£m d·∫ßn
            malware_types_full = [
                'Adware', 'Backdoor', 'Dialer', 'Obfuscated mal', 'PWS', 'Rogue',
                'TDownloader', 'Trojan', 'TrojanDownl', 'Virus', 'Worm'
            ]
            malware_counts_full = [
                4961, 5669, 553, 1228, 679, 381, 564, 5852, 848, 1997, 8869
            ]

            # S·∫Øp x·∫øp ƒë·ªÉ l·∫•y top 5 lo·∫°i c√≥ s·ªë l∆∞·ª£ng nhi·ªÅu nh·∫•t
            malware_data = list(zip(malware_types_full, malware_counts_full))
            malware_data_sorted = sorted(malware_data, key=lambda x: x[1], reverse=True)
            top5_types, top5_counts = zip(*malware_data_sorted[:5])

            col1, col2 = st.columns(2)
            with col1:
                fig, ax = plt.subplots(figsize=(8, 8))
                colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96c93d', '#feca57']

                wedges, texts, autotexts = ax.pie(
                    top5_counts,
                    labels=top5_types,
                    colors=colors,
                    autopct='%1.1f%%',
                    startangle=90,
                    explode=[0.05]*5
                )

                ax.set_title('Top 5 lo·∫°i m√£ ƒë·ªôc ph√°t hi·ªán nhi·ªÅu nh·∫•t', fontsize=15, fontweight='bold')

                for autotext in autotexts:
                    autotext.set_color('white')
                    autotext.set_fontweight('bold')

                st.pyplot(fig)
                plt.close()

            
            with col2:
                st.markdown("**Top 5 nh√≥m m√£ ƒë·ªôc c√≥ s·ªë ph√°t hi·ªán cao nh·∫•t:**")
                top_malware = [
                    {"name": "Worm", "detections": 8869, "risk": "C·ª±c cao"},
                    {"name": "Trojan", "detections": 5852, "risk": "Cao"},
                    {"name": "Backdoor", "detections": 5669, "risk": "Cao"},
                    {"name": "Adware", "detections": 4961, "risk": "Trung b√¨nh"},
                    {"name": "Virus", "detections": 1997, "risk": "Trung b√¨nh"}
                ]
                for i, malware in enumerate(top_malware, 1):
                    risk_color = {
                        "C·ª±c cao": "#d32f2f",
                        "Cao": "#f57c00",
                        "Trung b√¨nh": "#fbc02d"
                    }[malware["risk"]]
                    st.markdown(f"""
                    <div style="background: #f8f9fa; padding: 10px; margin: 5px 0; border-radius: 5px; border-left: 4px solid {risk_color};">
                        <strong>{i}. {malware['name']}</strong><br>
                        <small>Ph√°t hi·ªán: {malware['detections']:,} l·∫ßn | M·ª©c ƒë·ªô: <span style="color: {risk_color};">{malware['risk']}</span></small>
                    </div>
                    """, unsafe_allow_html=True)

        with chart_tabs[2]:
            st.markdown("##### Xu h∆∞·ªõng ph√°t hi·ªán m√£ ƒë·ªôc")

            fig, ax = plt.subplots(figsize=(12, 6))

            # D·ªØ li·ªáu trung b√¨nh theo tu·∫ßn
            weekly_stats = stats_df.groupby(stats_df['Ng√†y'].dt.to_period('W')).mean()

            ax.plot(range(len(weekly_stats)), weekly_stats['M√£ ƒë·ªôc ph√°t hi·ªán'],
                    marker='o', linewidth=2, markersize=4, color='#ff6b6b', label='M√£ ƒë·ªôc')
            ax.plot(range(len(weekly_stats)), weekly_stats['File l√†nh t√≠nh'],
                    marker='s', linewidth=2, markersize=4, color='#51cf66', label='File l√†nh t√≠nh')

            # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng t·ªïng th·ªÉ (polyfit b·∫≠c 1)
            z1 = np.polyfit(range(len(weekly_stats)), weekly_stats['M√£ ƒë·ªôc ph√°t hi·ªán'], 1)
            p1 = np.poly1d(z1)
            ax.plot(range(len(weekly_stats)), p1(range(len(weekly_stats))),
                    "--", alpha=0.7, color='#183153', label='Trend m√£ ƒë·ªôc')

            ax.set_xlabel('Tu·∫ßn')
            ax.set_ylabel('S·ªë l∆∞·ª£ng file trung b√¨nh')
            ax.set_title('Xu h∆∞·ªõng ph√°t hi·ªán m√£ ƒë·ªôc theo tu·∫ßn')
            ax.legend()
            ax.grid(True, alpha=0.3)

            plt.tight_layout()
            st.pyplot(fig)
            plt.close()

            # Hi·ªÉn th·ªã th√¥ng tin xu h∆∞·ªõng
            trend_slope = z1[0]
            if trend_slope > 0:
                trend_text = f"üìà T·ªïng th·ªÉ: s·ªë l∆∞·ª£ng file m√£ ƒë·ªôc/tu·∫ßn ƒëang c√≥ xu h∆∞·ªõng **tƒÉng** (+{trend_slope:.2f}/tu·∫ßn)"
                trend_color = "#ff6b6b"
            else:
                trend_text = f"üìâ T·ªïng th·ªÉ: s·ªë l∆∞·ª£ng file m√£ ƒë·ªôc/tu·∫ßn ƒëang c√≥ xu h∆∞·ªõng **gi·∫£m** (-{abs(trend_slope):.2f}/tu·∫ßn)"
                trend_color = "#51cf66"

            st.markdown(f"""
            <div style="background: {trend_color}; color: white; padding: 15px; border-radius: 5px; text-align: center; margin: 10px 0;">
                <h4>{trend_text}</h4>
            </div>
            """, unsafe_allow_html=True)


        with chart_tabs[3]:


            # D·ªØ li·ªáu theo 8 v√πng ƒë·ªãa l√Ω ch√≠nh c·ªßa Vi·ªát Nam (gi·∫£ l·∫≠p, ƒëi·ªÅn l·∫°i s·ªë li·ªáu th·ª±c t·∫ø n·∫øu c√≥)
            region_data = [
                {"region": "ƒê√¥ng B·∫Øc", "threats": 1350, "population": "15M", "density": 90.0},
                {"region": "T√¢y B·∫Øc", "threats": 620, "population": "5.7M", "density": 108.8},
                {"region": "ƒê·ªìng b·∫±ng s√¥ng H·ªìng", "threats": 2680, "population": "22M", "density": 121.8},
                {"region": "B·∫Øc Trung B·ªô", "threats": 1220, "population": "10.5M", "density": 116.2},
                {"region": "Nam Trung B·ªô", "threats": 980, "population": "9.1M", "density": 107.7},
                {"region": "T√¢y Nguy√™n", "threats": 870, "population": "6.2M", "density": 140.3},
                {"region": "ƒê√¥ng Nam B·ªô", "threats": 3350, "population": "18.2M", "density": 184.1},
                {"region": "ƒê·ªìng b·∫±ng s√¥ng C·ª≠u Long", "threats": 2110, "population": "17.5M", "density": 120.6}
            ]
            region_df = pd.DataFrame(region_data)

            # ƒê·∫∑t font ch·ªØ m·∫∑c ƒë·ªãnh cho matplotlib (n√™n d√πng font "DejaVu Sans" ho·∫∑c "Arial", ho·∫∑c font ti·∫øng Vi·ªát nh∆∞ "Roboto", "Tahoma" n·∫øu c√≥ h·ªó tr·ª£)
            plt.rcParams['font.family'] = 'DejaVu Sans'  # ho·∫∑c 'Arial', 'Tahoma', 'Roboto', v.v.
            plt.rcParams['font.size'] = 15

            fig, ax = plt.subplots(figsize=(15, 7))

            colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96c93d', '#feca57', '#ff9ff3', '#54a0ff', '#51cf66']
            bars = ax.barh(region_df['region'], region_df['threats'], color=colors, alpha=0.88, height=0.55)

            ax.set_xlabel('S·ªë l∆∞·ª£ng m·ªëi ƒëe d·ªça', fontsize=17, labelpad=15, fontweight='bold')
            ax.set_title('M·ªëi ƒëe d·ªça theo khu v·ª±c h√†nh ch√≠nh', fontsize=23, fontweight='bold', pad=25)
            ax.tick_params(axis='y', labelsize=16)
            ax.tick_params(axis='x', labelsize=15)
            ax.grid(True, alpha=0.25, axis='x', linestyle='--', linewidth=1.2)

            for bar in bars:
                width = bar.get_width()
                ax.text(width + max(region_df['threats']) * 0.015, bar.get_y() + bar.get_height()/2,
                        f'{int(width):,}', ha='left', va='center', fontsize=15, fontweight='bold', color='#222')

            plt.tight_layout(pad=2.2)
            st.pyplot(fig)
            plt.close()


            # with col2:
            # # Th·ªëng k√™ chi ti·∫øt r√∫t g·ªçn
            #     for region in region_data:
            #         st.markdown(f"""
            #         <div style="background: #f8f9fa; padding: 12px; margin: 8px 0; border-radius: 5px;">
            #             <h5 style="margin: 0 0 -18px 0; color: #333;">{region['region']}</h5>
            #             <div style="display: flex; justify-content: space-between;">
            #                 <span>M·ªëi ƒëe d·ªça:</span>
            #                 <strong>{region['threats']:,}</strong>
            #             </div>
            #             <div style="display: flex; justify-content: space-between;">
            #                 <span>T·ª∑ l·ªá nhi·ªÖm:</span>
            #                 <strong>{region['density']:.1f}%</strong>
            #             </div>
            #         </div>
            #         """, unsafe_allow_html=True)




        # Th√™m ph·∫ßn c·∫£nh b√°o v√† khuy·∫øn ngh·ªã
        st.markdown('<div class="sub-header">üí° Khuy·∫øn ngh·ªã B·∫£o m·∫≠t</div>', unsafe_allow_html=True)
        recommendations = [
            {
                "icon": "üõ°Ô∏è",
                "title": "C·∫≠p nh·∫≠t h·ªá th·ªëng th∆∞·ªùng xuy√™n",
                "desc": "Lu√¥n c√†i ƒë·∫∑t c√°c b·∫£n v√° b·∫£o m·∫≠t m·ªõi nh·∫•t cho h·ªá ƒëi·ªÅu h√†nh v√† ph·∫ßn m·ªÅm",
                "priority": "high"
            },
            {
                "icon": "üîç",
                "title": "Qu√©t m√£ ƒë·ªôc ƒë·ªãnh k·ª≥",
                "desc": "S·ª≠ d·ª•ng c√¥ng c·ª• n√†y ƒë·ªÉ qu√©t c√°c file ƒë√°ng ng·ªù √≠t nh·∫•t 1 l·∫ßn/tu·∫ßn",
                "priority": "high"
            },
            {
                "icon": "üìß",
                "title": "C·∫©n th·∫≠n v·ªõi email l·∫°",
                "desc": "Kh√¥ng m·ªü file ƒë√≠nh k√®m ho·∫∑c click link t·ª´ email kh√¥ng r√µ ngu·ªìn g·ªëc",
                "priority": "medium"
            },
            {
                "icon": "üíæ",
                "title": "Sao l∆∞u d·ªØ li·ªáu quan tr·ªçng",
                "desc": "Th·ª±c hi·ªán backup ƒë·ªãnh k·ª≥ v√† l∆∞u tr·ªØ ·ªü n∆°i an to√†n, t√°ch bi·ªát",
                "priority": "medium"
            },
            {
                "icon": "üîê",
                "title": "S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh",
                "desc": "T·∫°o m·∫≠t kh·∫©u ph·ª©c t·∫°p v√† b·∫≠t x√°c th·ª±c 2 y·∫øu t·ªë khi c√≥ th·ªÉ",
                "priority": "low"
            },
            {
                "icon": "üåê",
                "title": "Duy·ªát web an to√†n",
                "desc": "Tr√°nh truy c·∫≠p c√°c trang web ƒë√°ng ng·ªù v√† t·∫£i ph·∫ßn m·ªÅm t·ª´ ngu·ªìn kh√¥ng tin c·∫≠y",
                "priority": "low"
            }
        ]

        # Hi·ªÉn th·ªã khuy·∫øn ngh·ªã theo m·ª©c ƒë·ªô ∆∞u ti√™n
        priority_colors = {"high": "#ff6b6b", "medium": "#ffd43b", "low": "#51cf66"}
        priority_labels = {"high": "∆Øu ti√™n cao", "medium": "∆Øu ti√™n trung b√¨nh", "low": "∆Øu ti√™n th·∫•p"}

        for priority in ["high", "medium", "low"]:
            priority_recs = [r for r in recommendations if r["priority"] == priority]
            if priority_recs:
                st.markdown(f"""
                <div style="background: {priority_colors[priority]}; color: white; padding: 10px; border-radius: 5px 5px 0 0; margin-top: 20px;">
                    <h4 style="margin: 0;">{priority_labels[priority]}</h4>
                </div>
                """, unsafe_allow_html=True)
                
                for rec in priority_recs:
                    st.markdown(f"""
                    <div style="background: #f8f9fa; padding: 15px; margin: 0 0 2px 0; border-left: 4px solid {priority_colors[priority]};">
                        <div style="display: flex; align-items: center; margin-bottom: 8px;">
                            <span style="font-size: 24px; margin-right: 10px;">{rec['icon']}</span>
                            <h5 style="margin: 0; color: #333;">{rec['title']}</h5>
                        </div>
                        <p style="margin: 0; color: #666; line-height: 1.4;">{rec['desc']}</p>
                    </div>
                    """, unsafe_allow_html=True)
    # Footer cu·ªëi c√πng
    st.markdown("---")
    st.markdown("""
    <div style="
        max-width: 520px;
        margin: 0 auto 0 auto;
        background: linear-gradient(90deg, #e0eafc 0%, #cfdef3 100%);
        color: #222;
        padding: 18px 22px 10px 22px;
        text-align: center;
        border-radius: 14px;
        box-shadow: 0 2px 12px rgba(90,120,180,0.08);">
        <div style="display: flex; align-items: center; justify-content: center; gap:13px;">
            <img src="https://img.icons8.com/color/48/000000/user-male-circle--v1.png" width="44">
            <div style="text-align:left;">
                <b>¬© 2024 - Hu·ª≥nh H·∫£i C√¥ng Huy</b><br>
                <span style="font-size:15px;">Tr∆∞·ªùng ƒêH K·ªπ Thu·∫≠t - H·∫≠u C·∫ßn CAND</span>
            </div>
        </div>
        <div style="margin:8px 0 2px 0; font-size:15px;">
            <img src='https://img.icons8.com/color/48/000000/home-page.png' width='17' style="vertical-align:middle;">
            Ph∆∞·ªùng H·ªì, Thu·∫≠n Th√†nh, B·∫Øc Ninh
        </div>
        <div style="margin: 6px 0;">
            <img src="https://img.icons8.com/color/48/domain.png" width="16" style="vertical-align: middle;">
            <a href='https://dhkthtc.bacninh.gov.vn/TrangChu/' target='_blank' style='color:#2d69c7;font-weight:500;text-decoration:underline;'>dhkthtc.bacninh.gov.vn</a>
        </div>
        <div style="display:flex; justify-content:center; align-items:center; gap:13px; margin:9px 0 7px 0;">
            <div>
                <img src='https://img.icons8.com/color/48/000000/phone.png' width='20' style="vertical-align:middle;"> 
                0379095633
            </div>
            <a href="mailto:conghuy062000@gmail.com" target="_blank">
                <img src="https://img.icons8.com/color/48/000000/gmail.png" width="22">
            </a>
            <a href="https://www.facebook.com/block.huy" target="_blank">
                <img src="https://img.icons8.com/color/48/000000/facebook-new.png" width="22">
            </a>
            <a href="https://github.com/HICKER-WH" target="_blank">
                <img src="https://img.icons8.com/ios-filled/50/000000/github.png" width="20" style="background:white; border-radius:50%;">
            </a>
            <a href="https://www.linkedin.com/in/huy-hu%E1%BB%B3nh-h%E1%BA%A3i-c%C3%B4ng-2a640a177/" target="_blank">
                <img src="https://img.icons8.com/color/48/000000/linkedin.png" width="22">
            </a>
        </div>
<<<<<<< HEAD
        <div style="margin-top:3px;color:#444;font-size:13px;">
            <small>‚ö†Ô∏è K·∫øt qu·∫£ ch·ªâ tham kh·∫£o. Lu√¥n k·∫øt h·ª£p nhi·ªÅu c√¥ng c·ª• ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n t·ªëi ƒëa.</small>
        </div>
=======
>>>>>>> 58fc52c (C·∫≠p nh·∫≠t code: s·ª≠a bug/th√™m t√≠nh nƒÉng XYZ)
    </div>
    """, unsafe_allow_html=True)

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ m√¥ h√¨nh
if model is not None and class_names is not None:
    st.markdown(f"""
    <div style="text-align: center; color: #666; margin-top: 20px;">
<<<<<<< HEAD
        <b> ¬© 2024 - Huynh Hai Cong Huy</b>
    </div>
    """, unsafe_allow_html=True)
=======
        <b> ¬© 2025 - Huynh Hai Cong Huy</b>
    </div>
    """, unsafe_allow_html=True)

>>>>>>> 58fc52c (C·∫≠p nh·∫≠t code: s·ª≠a bug/th√™m t√≠nh nƒÉng XYZ)
else:
    st.error("M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n ƒë·∫øn file model.")
